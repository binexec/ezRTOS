
p2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800200  000019fc  00001a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001407  008003a4  008003a4  00001c34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f16  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d7  00000000  00000000  00003dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000147a  00000000  00000000  000045c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  00005a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008cb  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000157f  00000000  00000000  00006873  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00007df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c2       	rjmp	.+1146   	; 0x4c0 <__vector_17>
      46:	00 00       	nop
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c0       	rjmp	.+218    	; 0x140 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c0       	rjmp	.+190    	; 0x140 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c0       	rjmp	.+174    	; 0x140 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9f 08       	sbc	r9, r15
      e6:	90 05       	cpc	r25, r0
      e8:	9f 08       	sbc	r9, r15
      ea:	9f 05       	cpc	r25, r15
      ec:	77 06       	cpc	r7, r23
      ee:	9b 06       	cpc	r9, r27
      f0:	d7 06       	cpc	r13, r23
      f2:	de 06       	cpc	r13, r30
      f4:	e0 06       	cpc	r14, r16
      f6:	27 07       	cpc	r18, r23
      f8:	68 07       	cpc	r22, r24
      fa:	6a 07       	cpc	r22, r26
      fc:	fd 07       	cpc	r31, r29

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	ec ef       	ldi	r30, 0xFC	; 252
     116:	f9 e1       	ldi	r31, 0x19	; 25
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a4 3a       	cpi	r26, 0xA4	; 164
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	27 e1       	ldi	r18, 0x17	; 23
     12a:	a4 ea       	ldi	r26, 0xA4	; 164
     12c:	b3 e0       	ldi	r27, 0x03	; 3
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ab 3a       	cpi	r26, 0xAB	; 171
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <main>
     13c:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	fc b7       	in	r31, 0x3c	; 60
     184:	ff 93       	push	r31
     186:	ff b7       	in	r31, 0x3f	; 63
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 a3 17 	sts	0x17A3, r30	; 0x8017a3 <KernelSp>
        sts  KernelSp+1, r31
     192:	f0 93 a4 17 	sts	0x17A4, r31	; 0x8017a4 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 9d 17 	lds	r30, 0x179D	; 0x80179d <CurrentSp>
        lds  r31, CurrentSp+1
     19a:	f0 91 9e 17 	lds	r31, 0x179E	; 0x80179e <CurrentSp+0x1>
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	ff bf       	out	0x3f, r31	; 63
     1a6:	ff 91       	pop	r31
     1a8:	fc bf       	out	0x3c, r31	; 60
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	fc b7       	in	r31, 0x3c	; 60
     22e:	ff 93       	push	r31
     230:	ff b7       	in	r31, 0x3f	; 63
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 9d 17 	sts	0x179D, r30	; 0x80179d <CurrentSp>
        sts  CurrentSp+1, r31
     23c:	f0 93 9e 17 	sts	0x179E, r31	; 0x80179e <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 a3 17 	lds	r30, 0x17A3	; 0x8017a3 <KernelSp>
        lds  r31, KernelSp+1
     244:	f0 91 a4 17 	lds	r31, 0x17A4	; 0x8017a4 <KernelSp+0x1>
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	ff bf       	out	0x3f, r31	; 63
     250:	ff 91       	pop	r31
     252:	fc bf       	out	0x3c, r31	; 60
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
         */
       ret
     294:	08 95       	ret

00000296 <Kernel_Select_Next_Task>:
	Enable_Interrupt();	
}

void Exit_Critical_Section()
{
	Disable_Interrupt();
     296:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <Last_Dispatched>
     29a:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <Last_Dispatched+0x1>
     29e:	e0 e1       	ldi	r30, 0x10	; 16
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	8f ef       	ldi	r24, 0xFF	; 255
     2a4:	9f ef       	ldi	r25, 0xFF	; 255
     2a6:	4b e0       	ldi	r20, 0x0B	; 11
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	6e e0       	ldi	r22, 0x0E	; 14
     2ac:	71 e0       	ldi	r23, 0x01	; 1
     2ae:	2f 5f       	subi	r18, 0xFF	; 255
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	2f 70       	andi	r18, 0x0F	; 15
     2b4:	33 27       	eor	r19, r19
     2b6:	26 9f       	mul	r18, r22
     2b8:	d0 01       	movw	r26, r0
     2ba:	27 9f       	mul	r18, r23
     2bc:	b0 0d       	add	r27, r0
     2be:	36 9f       	mul	r19, r22
     2c0:	b0 0d       	add	r27, r0
     2c2:	11 24       	eor	r1, r1
     2c4:	aa 54       	subi	r26, 0x4A	; 74
     2c6:	b9 4f       	sbci	r27, 0xF9	; 249
     2c8:	13 96       	adiw	r26, 0x03	; 3
     2ca:	ac 91       	ld	r26, X
     2cc:	a1 30       	cpi	r26, 0x01	; 1
     2ce:	e9 f4       	brne	.+58     	; 0x30a <Kernel_Select_Next_Task+0x74>
     2d0:	26 9f       	mul	r18, r22
     2d2:	d0 01       	movw	r26, r0
     2d4:	27 9f       	mul	r18, r23
     2d6:	b0 0d       	add	r27, r0
     2d8:	36 9f       	mul	r19, r22
     2da:	b0 0d       	add	r27, r0
     2dc:	11 24       	eor	r1, r1
     2de:	aa 54       	subi	r26, 0x4A	; 74
     2e0:	b9 4f       	sbci	r27, 0xF9	; 249
     2e2:	12 96       	adiw	r26, 0x02	; 2
     2e4:	ac 91       	ld	r26, X
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	a4 17       	cp	r26, r20
     2ea:	b5 07       	cpc	r27, r21
     2ec:	74 f4       	brge	.+28     	; 0x30a <Kernel_Select_Next_Task+0x74>
     2ee:	82 2f       	mov	r24, r18
     2f0:	93 2f       	mov	r25, r19
     2f2:	26 9f       	mul	r18, r22
     2f4:	d0 01       	movw	r26, r0
     2f6:	27 9f       	mul	r18, r23
     2f8:	b0 0d       	add	r27, r0
     2fa:	36 9f       	mul	r19, r22
     2fc:	b0 0d       	add	r27, r0
     2fe:	11 24       	eor	r1, r1
     300:	aa 54       	subi	r26, 0x4A	; 74
     302:	b9 4f       	sbci	r27, 0xF9	; 249
     304:	12 96       	adiw	r26, 0x02	; 2
     306:	4c 91       	ld	r20, X
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	81 f6       	brne	.-96     	; 0x2ae <Kernel_Select_Next_Task+0x18>
     30e:	08 95       	ret

00000310 <findProcessByPID>:
     310:	18 16       	cp	r1, r24
     312:	19 06       	cpc	r1, r25
     314:	84 f5       	brge	.+96     	; 0x376 <findProcessByPID+0x66>
     316:	20 91 b6 06 	lds	r18, 0x06B6	; 0x8006b6 <Process>
     31a:	30 91 b7 06 	lds	r19, 0x06B7	; 0x8006b7 <Process+0x1>
     31e:	28 17       	cp	r18, r24
     320:	39 07       	cpc	r19, r25
     322:	99 f0       	breq	.+38     	; 0x34a <findProcessByPID+0x3a>
     324:	21 e0       	ldi	r18, 0x01	; 1
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	6e e0       	ldi	r22, 0x0E	; 14
     32a:	71 e0       	ldi	r23, 0x01	; 1
     32c:	26 9f       	mul	r18, r22
     32e:	f0 01       	movw	r30, r0
     330:	27 9f       	mul	r18, r23
     332:	f0 0d       	add	r31, r0
     334:	36 9f       	mul	r19, r22
     336:	f0 0d       	add	r31, r0
     338:	11 24       	eor	r1, r1
     33a:	ea 54       	subi	r30, 0x4A	; 74
     33c:	f9 4f       	sbci	r31, 0xF9	; 249
     33e:	40 81       	ld	r20, Z
     340:	51 81       	ldd	r21, Z+1	; 0x01
     342:	48 17       	cp	r20, r24
     344:	59 07       	cpc	r21, r25
     346:	79 f4       	brne	.+30     	; 0x366 <findProcessByPID+0x56>
     348:	02 c0       	rjmp	.+4      	; 0x34e <findProcessByPID+0x3e>
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	4e e0       	ldi	r20, 0x0E	; 14
     350:	51 e0       	ldi	r21, 0x01	; 1
     352:	24 9f       	mul	r18, r20
     354:	c0 01       	movw	r24, r0
     356:	25 9f       	mul	r18, r21
     358:	90 0d       	add	r25, r0
     35a:	34 9f       	mul	r19, r20
     35c:	90 0d       	add	r25, r0
     35e:	11 24       	eor	r1, r1
     360:	8a 54       	subi	r24, 0x4A	; 74
     362:	99 4f       	sbci	r25, 0xF9	; 249
     364:	08 95       	ret
     366:	2f 5f       	subi	r18, 0xFF	; 255
     368:	3f 4f       	sbci	r19, 0xFF	; 255
     36a:	20 31       	cpi	r18, 0x10	; 16
     36c:	31 05       	cpc	r19, r1
     36e:	f1 f6       	brne	.-68     	; 0x32c <findProcessByPID+0x1c>
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	08 95       	ret
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	08 95       	ret

0000037c <findEventByEventID>:
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	51 f0       	breq	.+20     	; 0x394 <findEventByEventID+0x18>
     380:	20 91 86 06 	lds	r18, 0x0686	; 0x800686 <Event>
     384:	30 91 87 06 	lds	r19, 0x0687	; 0x800687 <Event+0x1>
     388:	82 17       	cp	r24, r18
     38a:	93 07       	cpc	r25, r19
     38c:	c1 f0       	breq	.+48     	; 0x3be <findEventByEventID+0x42>
     38e:	21 e0       	ldi	r18, 0x01	; 1
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	06 c0       	rjmp	.+12     	; 0x3a0 <findEventByEventID+0x24>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	08 95       	ret
     3a0:	f9 01       	movw	r30, r18
     3a2:	ee 0f       	add	r30, r30
     3a4:	ff 1f       	adc	r31, r31
     3a6:	e2 0f       	add	r30, r18
     3a8:	f3 1f       	adc	r31, r19
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	ea 57       	subi	r30, 0x7A	; 122
     3b0:	f9 4f       	sbci	r31, 0xF9	; 249
     3b2:	40 81       	ld	r20, Z
     3b4:	51 81       	ldd	r21, Z+1	; 0x01
     3b6:	84 17       	cp	r24, r20
     3b8:	95 07       	cpc	r25, r21
     3ba:	69 f4       	brne	.+26     	; 0x3d6 <findEventByEventID+0x5a>
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <findEventByEventID+0x46>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	c9 01       	movw	r24, r18
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	8a 57       	subi	r24, 0x7A	; 122
     3d2:	99 4f       	sbci	r25, 0xF9	; 249
     3d4:	08 95       	ret
     3d6:	2f 5f       	subi	r18, 0xFF	; 255
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
     3da:	28 30       	cpi	r18, 0x08	; 8
     3dc:	31 05       	cpc	r19, r1
     3de:	01 f7       	brne	.-64     	; 0x3a0 <findEventByEventID+0x24>
     3e0:	89 e0       	ldi	r24, 0x09	; 9
     3e2:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	08 95       	ret

000003ec <findMutexByMutexID>:
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	59 f0       	breq	.+22     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     3f0:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <Mutex>
     3f4:	30 91 af 03 	lds	r19, 0x03AF	; 0x8003af <Mutex+0x1>
     3f8:	82 17       	cp	r24, r18
     3fa:	93 07       	cpc	r25, r19
     3fc:	b9 f0       	breq	.+46     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
     3fe:	21 e0       	ldi	r18, 0x01	; 1
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	6b e5       	ldi	r22, 0x5B	; 91
     404:	06 c0       	rjmp	.+12     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	08 95       	ret
     412:	62 9f       	mul	r22, r18
     414:	f0 01       	movw	r30, r0
     416:	63 9f       	mul	r22, r19
     418:	f0 0d       	add	r31, r0
     41a:	11 24       	eor	r1, r1
     41c:	e2 55       	subi	r30, 0x52	; 82
     41e:	fc 4f       	sbci	r31, 0xFC	; 252
     420:	40 81       	ld	r20, Z
     422:	51 81       	ldd	r21, Z+1	; 0x01
     424:	84 17       	cp	r24, r20
     426:	95 07       	cpc	r25, r21
     428:	61 f4       	brne	.+24     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	4b e5       	ldi	r20, 0x5B	; 91
     432:	42 9f       	mul	r20, r18
     434:	c0 01       	movw	r24, r0
     436:	43 9f       	mul	r20, r19
     438:	90 0d       	add	r25, r0
     43a:	11 24       	eor	r1, r1
     43c:	82 55       	subi	r24, 0x52	; 82
     43e:	9c 4f       	sbci	r25, 0xFC	; 252
     440:	08 95       	ret
     442:	2f 5f       	subi	r18, 0xFF	; 255
     444:	3f 4f       	sbci	r19, 0xFF	; 255
     446:	28 30       	cpi	r18, 0x08	; 8
     448:	31 05       	cpc	r19, r1
     44a:	19 f7       	brne	.-58     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     44c:	8d e0       	ldi	r24, 0x0D	; 13
     44e:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	08 95       	ret

00000458 <findPIDByFuncPtr>:
     458:	20 91 c2 07 	lds	r18, 0x07C2	; 0x8007c2 <Process+0x10c>
     45c:	30 91 c3 07 	lds	r19, 0x07C3	; 0x8007c3 <Process+0x10d>
     460:	82 17       	cp	r24, r18
     462:	93 07       	cpc	r25, r19
     464:	99 f0       	breq	.+38     	; 0x48c <findPIDByFuncPtr+0x34>
     466:	21 e0       	ldi	r18, 0x01	; 1
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	6e e0       	ldi	r22, 0x0E	; 14
     46c:	71 e0       	ldi	r23, 0x01	; 1
     46e:	26 9f       	mul	r18, r22
     470:	f0 01       	movw	r30, r0
     472:	27 9f       	mul	r18, r23
     474:	f0 0d       	add	r31, r0
     476:	36 9f       	mul	r19, r22
     478:	f0 0d       	add	r31, r0
     47a:	11 24       	eor	r1, r1
     47c:	ee 53       	subi	r30, 0x3E	; 62
     47e:	f8 4f       	sbci	r31, 0xF8	; 248
     480:	40 81       	ld	r20, Z
     482:	51 81       	ldd	r21, Z+1	; 0x01
     484:	48 17       	cp	r20, r24
     486:	59 07       	cpc	r21, r25
     488:	89 f4       	brne	.+34     	; 0x4ac <findPIDByFuncPtr+0x54>
     48a:	02 c0       	rjmp	.+4      	; 0x490 <findPIDByFuncPtr+0x38>
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	8e e0       	ldi	r24, 0x0E	; 14
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	28 9f       	mul	r18, r24
     496:	f0 01       	movw	r30, r0
     498:	29 9f       	mul	r18, r25
     49a:	f0 0d       	add	r31, r0
     49c:	38 9f       	mul	r19, r24
     49e:	f0 0d       	add	r31, r0
     4a0:	11 24       	eor	r1, r1
     4a2:	ea 54       	subi	r30, 0x4A	; 74
     4a4:	f9 4f       	sbci	r31, 0xF9	; 249
     4a6:	80 81       	ld	r24, Z
     4a8:	91 81       	ldd	r25, Z+1	; 0x01
     4aa:	08 95       	ret
     4ac:	2f 5f       	subi	r18, 0xFF	; 255
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	20 31       	cpi	r18, 0x10	; 16
     4b2:	31 05       	cpc	r19, r1
     4b4:	e1 f6       	brne	.-72     	; 0x46e <findPIDByFuncPtr+0x16>
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	9f ef       	ldi	r25, 0xFF	; 255
     4ba:	08 95       	ret

000004bc <Enter_Critical_Section>:
     4bc:	78 94       	sei
     4be:	08 95       	ret

000004c0 <__vector_17>:
/*                  ISR FOR HANDLING SLEEP TICKS                        */
/************************************************************************/

//Timer tick ISR
ISR(TIMER1_COMPA_vect)
{
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
	++Tick_Count;
     4ce:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     4d2:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <__data_end+0x1>
     4dc:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <__data_end>
}
     4e0:	9f 91       	pop	r25
     4e2:	8f 91       	pop	r24
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <Kernel_Tick_Handler>:
void Kernel_Tick_Handler()
{
	int i;
	
	//No ticks has been issued yet, skipping...
	if(Tick_Count == 0)
     4ee:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     4f2:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
     4f6:	89 2b       	or	r24, r25
     4f8:	09 f4       	brne	.+2      	; 0x4fc <Kernel_Tick_Handler+0xe>
     4fa:	6f c0       	rjmp	.+222    	; 0x5da <Kernel_Tick_Handler+0xec>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
		return;
	
	for(i=0; i<MAXTHREAD; i++)
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     500:	2e e0       	ldi	r18, 0x0E	; 14
     502:	31 e0       	ldi	r19, 0x01	; 1
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			Process[i].request_arg -= Tick_Count;
			if(Process[i].request_arg <= 0)
			{
				Process[i].last_state = READY;
     504:	61 e0       	ldi	r22, 0x01	; 1
		return;
	
	for(i=0; i<MAXTHREAD; i++)
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     506:	82 9f       	mul	r24, r18
     508:	f0 01       	movw	r30, r0
     50a:	83 9f       	mul	r24, r19
     50c:	f0 0d       	add	r31, r0
     50e:	92 9f       	mul	r25, r18
     510:	f0 0d       	add	r31, r0
     512:	11 24       	eor	r1, r1
     514:	ea 54       	subi	r30, 0x4A	; 74
     516:	f9 4f       	sbci	r31, 0xF9	; 249
     518:	43 81       	ldd	r20, Z+3	; 0x03
     51a:	44 30       	cpi	r20, 0x04	; 4
     51c:	29 f5       	brne	.+74     	; 0x568 <Kernel_Tick_Handler+0x7a>
		{
			//If the current sleeping task's tick count expires, put it back into its READY state
			Process[i].request_arg -= Tick_Count;
     51e:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <__data_end>
     522:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <__data_end+0x1>
     526:	82 9f       	mul	r24, r18
     528:	f0 01       	movw	r30, r0
     52a:	83 9f       	mul	r24, r19
     52c:	f0 0d       	add	r31, r0
     52e:	92 9f       	mul	r25, r18
     530:	f0 0d       	add	r31, r0
     532:	11 24       	eor	r1, r1
     534:	ea 54       	subi	r30, 0x4A	; 74
     536:	f9 4f       	sbci	r31, 0xF9	; 249
     538:	46 81       	ldd	r20, Z+6	; 0x06
     53a:	57 81       	ldd	r21, Z+7	; 0x07
     53c:	4a 1b       	sub	r20, r26
     53e:	5b 0b       	sbc	r21, r27
     540:	57 83       	std	Z+7, r21	; 0x07
     542:	46 83       	std	Z+6, r20	; 0x06
			if(Process[i].request_arg <= 0)
     544:	46 81       	ldd	r20, Z+6	; 0x06
     546:	57 81       	ldd	r21, Z+7	; 0x07
     548:	14 16       	cp	r1, r20
     54a:	15 06       	cpc	r1, r21
     54c:	ec f1       	brlt	.+122    	; 0x5c8 <Kernel_Tick_Handler+0xda>
			{
				Process[i].state = READY;
     54e:	82 9f       	mul	r24, r18
     550:	f0 01       	movw	r30, r0
     552:	83 9f       	mul	r24, r19
     554:	f0 0d       	add	r31, r0
     556:	92 9f       	mul	r25, r18
     558:	f0 0d       	add	r31, r0
     55a:	11 24       	eor	r1, r1
     55c:	ea 54       	subi	r30, 0x4A	; 74
     55e:	f9 4f       	sbci	r31, 0xF9	; 249
     560:	63 83       	std	Z+3, r22	; 0x03
				Process[i].request_arg = 0;
     562:	17 82       	std	Z+7, r1	; 0x07
     564:	16 82       	std	Z+6, r1	; 0x06
     566:	30 c0       	rjmp	.+96     	; 0x5c8 <Kernel_Tick_Handler+0xda>
			}
		}
		
		//Process any SUSPENDED tasks that were previously sleeping
		else if(Process[i].last_state == SLEEPING)
     568:	82 9f       	mul	r24, r18
     56a:	f0 01       	movw	r30, r0
     56c:	83 9f       	mul	r24, r19
     56e:	f0 0d       	add	r31, r0
     570:	92 9f       	mul	r25, r18
     572:	f0 0d       	add	r31, r0
     574:	11 24       	eor	r1, r1
     576:	ea 54       	subi	r30, 0x4A	; 74
     578:	f9 4f       	sbci	r31, 0xF9	; 249
     57a:	44 81       	ldd	r20, Z+4	; 0x04
     57c:	44 30       	cpi	r20, 0x04	; 4
     57e:	21 f5       	brne	.+72     	; 0x5c8 <Kernel_Tick_Handler+0xda>
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			Process[i].request_arg -= Tick_Count;
     580:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <__data_end>
     584:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <__data_end+0x1>
     588:	82 9f       	mul	r24, r18
     58a:	f0 01       	movw	r30, r0
     58c:	83 9f       	mul	r24, r19
     58e:	f0 0d       	add	r31, r0
     590:	92 9f       	mul	r25, r18
     592:	f0 0d       	add	r31, r0
     594:	11 24       	eor	r1, r1
     596:	ea 54       	subi	r30, 0x4A	; 74
     598:	f9 4f       	sbci	r31, 0xF9	; 249
     59a:	46 81       	ldd	r20, Z+6	; 0x06
     59c:	57 81       	ldd	r21, Z+7	; 0x07
     59e:	4a 1b       	sub	r20, r26
     5a0:	5b 0b       	sbc	r21, r27
     5a2:	57 83       	std	Z+7, r21	; 0x07
     5a4:	46 83       	std	Z+6, r20	; 0x06
			if(Process[i].request_arg <= 0)
     5a6:	46 81       	ldd	r20, Z+6	; 0x06
     5a8:	57 81       	ldd	r21, Z+7	; 0x07
     5aa:	14 16       	cp	r1, r20
     5ac:	15 06       	cpc	r1, r21
     5ae:	64 f0       	brlt	.+24     	; 0x5c8 <Kernel_Tick_Handler+0xda>
			{
				Process[i].last_state = READY;
     5b0:	82 9f       	mul	r24, r18
     5b2:	f0 01       	movw	r30, r0
     5b4:	83 9f       	mul	r24, r19
     5b6:	f0 0d       	add	r31, r0
     5b8:	92 9f       	mul	r25, r18
     5ba:	f0 0d       	add	r31, r0
     5bc:	11 24       	eor	r1, r1
     5be:	ea 54       	subi	r30, 0x4A	; 74
     5c0:	f9 4f       	sbci	r31, 0xF9	; 249
     5c2:	64 83       	std	Z+4, r22	; 0x04
				Process[i].request_arg = 0;
     5c4:	17 82       	std	Z+7, r1	; 0x07
     5c6:	16 82       	std	Z+6, r1	; 0x06
	
	//No ticks has been issued yet, skipping...
	if(Tick_Count == 0)
		return;
	
	for(i=0; i<MAXTHREAD; i++)
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	80 31       	cpi	r24, 0x10	; 16
     5cc:	91 05       	cpc	r25, r1
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <Kernel_Tick_Handler+0xe4>
     5d0:	9a cf       	rjmp	.-204    	; 0x506 <Kernel_Tick_Handler+0x18>
				Process[i].last_state = READY;
				Process[i].request_arg = 0;
			}
		}
	}
	Tick_Count = 0;
     5d2:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     5d6:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
     5da:	08 95       	ret

000005dc <Dispatch>:
	return next_dispatch;
}

/* Dispatches a new task */
static void Dispatch()
{
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
	unsigned int i;
	int next_dispatch = Kernel_Select_Next_Task();
     5e2:	df 93       	push	r29
     5e4:	58 de       	rcall	.-848    	; 0x296 <Kernel_Select_Next_Task>

	//When none of the tasks in the process list is ready
	if(next_dispatch < 0)
     5e6:	ec 01       	movw	r28, r24
     5e8:	99 23       	and	r25, r25
	{
		i = Last_Dispatched;
     5ea:	34 f5       	brge	.+76     	; 0x638 <Dispatch+0x5c>
     5ec:	c0 91 ac 03 	lds	r28, 0x03AC	; 0x8003ac <Last_Dispatched>
     5f0:	d0 91 ad 03 	lds	r29, 0x03AD	; 0x8003ad <Last_Dispatched+0x1>
		
		//We'll temporarily re-enable interrupt in case if one or more task is waiting on events/interrupts or sleeping
		Enable_Interrupt();
		
		//Looping through the process list until any process becomes ready
		while(Process[i].state != READY)
     5f4:	78 94       	sei
     5f6:	0e e0       	ldi	r16, 0x0E	; 14
     5f8:	11 e0       	ldi	r17, 0x01	; 1
		{
			//Increment process index
			i = (i+1) % MAXTHREAD;
     5fa:	06 c0       	rjmp	.+12     	; 0x608 <Dispatch+0x2c>
     5fc:	21 96       	adiw	r28, 0x01	; 1
			
			//Check if any timer ticks came in
			Disable_Interrupt();
			Kernel_Tick_Handler();	
     5fe:	cf 70       	andi	r28, 0x0F	; 15
     600:	dd 27       	eor	r29, r29
			Enable_Interrupt();
     602:	f8 94       	cli
		
		//We'll temporarily re-enable interrupt in case if one or more task is waiting on events/interrupts or sleeping
		Enable_Interrupt();
		
		//Looping through the process list until any process becomes ready
		while(Process[i].state != READY)
     604:	74 df       	rcall	.-280    	; 0x4ee <Kernel_Tick_Handler>
     606:	78 94       	sei
     608:	c0 9f       	mul	r28, r16
     60a:	f0 01       	movw	r30, r0
     60c:	c1 9f       	mul	r28, r17
     60e:	f0 0d       	add	r31, r0
     610:	d0 9f       	mul	r29, r16
     612:	f0 0d       	add	r31, r0
     614:	11 24       	eor	r1, r1
     616:	ea 54       	subi	r30, 0x4A	; 74
     618:	f9 4f       	sbci	r31, 0xF9	; 249
			Kernel_Tick_Handler();	
			Enable_Interrupt();
		}
		
		//Now that we have some ready tasks, interrupts must be disabled for the kernel to function properly again.
		Disable_Interrupt();
     61a:	83 81       	ldd	r24, Z+3	; 0x03
		next_dispatch = Kernel_Select_Next_Task();
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	71 f7       	brne	.-36     	; 0x5fc <Dispatch+0x20>
     620:	f8 94       	cli
		
		if(next_dispatch < 0)
     622:	39 de       	rcall	.-910    	; 0x296 <Kernel_Select_Next_Task>
     624:	ec 01       	movw	r28, r24
			printf("SOMETHING WENT WRONG WITH SCHEDULLER!\N");
     626:	99 23       	and	r25, r25
     628:	3c f4       	brge	.+14     	; 0x638 <Dispatch+0x5c>
     62a:	84 e3       	ldi	r24, 0x34	; 52
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	f2 d6       	rcall	.+3556   	; 0x1418 <printf>
		
	}
	

	//Load the next selected task's process descriptor into Cp
	Last_Dispatched = next_dispatch;
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	d0 93 ad 03 	sts	0x03AD, r29	; 0x8003ad <Last_Dispatched+0x1>
	Cp = &(Process[Last_Dispatched]);
     63c:	c0 93 ac 03 	sts	0x03AC, r28	; 0x8003ac <Last_Dispatched>
     640:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <Last_Dispatched>
     644:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <Last_Dispatched+0x1>
     648:	8e e0       	ldi	r24, 0x0E	; 14
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	28 9f       	mul	r18, r24
     64e:	f0 01       	movw	r30, r0
     650:	29 9f       	mul	r18, r25
     652:	f0 0d       	add	r31, r0
     654:	38 9f       	mul	r19, r24
     656:	f0 0d       	add	r31, r0
     658:	11 24       	eor	r1, r1
     65a:	ea 54       	subi	r30, 0x4A	; 74
     65c:	f9 4f       	sbci	r31, 0xF9	; 249
     65e:	f0 93 a0 17 	sts	0x17A0, r31	; 0x8017a0 <Cp+0x1>
	CurrentSp = Cp->sp;
     662:	e0 93 9f 17 	sts	0x179F, r30	; 0x80179f <Cp>
     666:	82 85       	ldd	r24, Z+10	; 0x0a
     668:	93 85       	ldd	r25, Z+11	; 0x0b
     66a:	90 93 9e 17 	sts	0x179E, r25	; 0x80179e <CurrentSp+0x1>
	Cp->state = RUNNING;
     66e:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <CurrentSp>
}
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	83 83       	std	Z+3, r24	; 0x03
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <Kernel_Create_Task>:
/*                   TASK RELATED KERNEL FUNCTIONS                      */
/************************************************************************/

/* Handles all low level operations for creating a new task */
void Kernel_Create_Task(voidfuncptr f, PRIORITY py, int arg)
{
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
	#ifdef DEBUG
	int counter = 0;
	#endif
	
	//Make sure the system can still have enough resources to create more tasks
	if (Task_Count == MAXTHREAD)
     68e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <Task_Count>
     692:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <Task_Count+0x1>
     696:	40 97       	sbiw	r24, 0x10	; 16
     698:	49 f0       	breq	.+18     	; 0x6ac <Kernel_Create_Task+0x2c>
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     69a:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <Process+0x3>
     69e:	88 23       	and	r24, r24
     6a0:	d9 f0       	breq	.+54     	; 0x6d8 <Kernel_Create_Task+0x58>
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	ae e0       	ldi	r26, 0x0E	; 14
     6a8:	b1 e0       	ldi	r27, 0x01	; 1
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <Kernel_Create_Task+0x34>
	{
		#ifdef DEBUG
		printf("Task_Create: Failed to create task. The system is at its process threshold.\n");
		#endif
		
		err = MAX_PROCESS_ERR;
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
		return;
     6b2:	62 c0       	rjmp	.+196    	; 0x778 <Kernel_Create_Task+0xf8>
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     6b4:	2a 9f       	mul	r18, r26
     6b6:	f0 01       	movw	r30, r0
     6b8:	2b 9f       	mul	r18, r27
     6ba:	f0 0d       	add	r31, r0
     6bc:	3a 9f       	mul	r19, r26
     6be:	f0 0d       	add	r31, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	ea 54       	subi	r30, 0x4A	; 74
     6c4:	f9 4f       	sbci	r31, 0xF9	; 249
     6c6:	93 81       	ldd	r25, Z+3	; 0x03
     6c8:	99 23       	and	r25, r25
     6ca:	41 f0       	breq	.+16     	; 0x6dc <Kernel_Create_Task+0x5c>
		err = MAX_PROCESS_ERR;
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
     6cc:	2f 5f       	subi	r18, 0xFF	; 255
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	20 31       	cpi	r18, 0x10	; 16
     6d2:	31 05       	cpc	r19, r1
     6d4:	79 f7       	brne	.-34     	; 0x6b4 <Kernel_Create_Task+0x34>
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <Kernel_Create_Task+0x5c>
	if (Process[x].state == DEAD) break;
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
	
	++Task_Count;
     6dc:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <Task_Count>
     6e0:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <Task_Count+0x1>
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <Task_Count+0x1>
     6ea:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <Task_Count>
	p = &(Process[x]);
	
	/*The code below was agglomerated from Kernel_Create_Task_At;*/
	
	//Initializing the workspace memory for the new task
	sp = (unsigned char *) &(p->workSpace[WORKSPACE-1]);
     6ee:	8e e0       	ldi	r24, 0x0E	; 14
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	28 9f       	mul	r18, r24
     6f4:	f0 01       	movw	r30, r0
     6f6:	29 9f       	mul	r18, r25
     6f8:	f0 0d       	add	r31, r0
     6fa:	38 9f       	mul	r19, r24
     6fc:	f0 0d       	add	r31, r0
     6fe:	11 24       	eor	r1, r1
     700:	9f 01       	movw	r18, r30
     702:	2f 53       	subi	r18, 0x3F	; 63
     704:	38 4f       	sbci	r19, 0xF8	; 248
	memset(&(p->workSpace),0,WORKSPACE);
     706:	8f 01       	movw	r16, r30
     708:	0e 53       	subi	r16, 0x3E	; 62
     70a:	19 4f       	sbci	r17, 0xF9	; 249
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	d8 01       	movw	r26, r16
     712:	8c 01       	movw	r16, r24
     714:	1d 92       	st	X+, r1
     716:	01 50       	subi	r16, 0x01	; 1
     718:	10 40       	sbci	r17, 0x00	; 0
     71a:	e1 f7       	brne	.-8      	; 0x714 <Kernel_Create_Task+0x94>

	//Store terminate at the bottom of stack to protect against stack underrun.
	*(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
     71c:	ea 54       	subi	r30, 0x4A	; 74
     71e:	f9 4f       	sbci	r31, 0xF9	; 249
     720:	df 01       	movw	r26, r30
     722:	a5 5f       	subi	r26, 0xF5	; 245
     724:	be 4f       	sbci	r27, 0xFE	; 254
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	99 e0       	ldi	r25, 0x09	; 9
     72a:	8c 93       	st	X, r24
	*(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
     72c:	d9 01       	movw	r26, r18
     72e:	11 97       	sbiw	r26, 0x01	; 1
     730:	9c 93       	st	X, r25
	*(unsigned char *)sp-- = 0x00;
     732:	11 97       	sbiw	r26, 0x01	; 1
     734:	1c 92       	st	X, r1

	//Place return address of function at bottom of stack
	*(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
     736:	11 97       	sbiw	r26, 0x01	; 1
     738:	cc 93       	st	X, r28
	*(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
     73a:	11 97       	sbiw	r26, 0x01	; 1
     73c:	dc 93       	st	X, r29
	*(unsigned char *)sp-- = 0x00;
     73e:	11 97       	sbiw	r26, 0x01	; 1
     740:	1c 92       	st	X, r1
	 //Place stack pointer at top of stack
	 sp = sp - 34;
	#endif
	
	//Build the process descriptor for the new task
	p->pid = ++Last_PID;
     742:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <Last_PID>
     746:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <Last_PID+0x1>
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	90 93 97 17 	sts	0x1797, r25	; 0x801797 <Last_PID+0x1>
     750:	80 93 96 17 	sts	0x1796, r24	; 0x801796 <Last_PID>
     754:	91 83       	std	Z+1, r25	; 0x01
     756:	80 83       	st	Z, r24
	p->pri = py;
     758:	62 83       	std	Z+2, r22	; 0x02
	p->arg = arg;
     75a:	51 87       	std	Z+9, r21	; 0x09
     75c:	40 87       	std	Z+8, r20	; 0x08
	p->request = NONE;
     75e:	15 82       	std	Z+5, r1	; 0x05
	p->state = READY;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	83 83       	std	Z+3, r24	; 0x03
	 {
		 *(unsigned char *)sp-- = counter;
	 }
	#else
	 //Place stack pointer at top of stack
	 sp = sp - 34;
     764:	28 52       	subi	r18, 0x28	; 40
     766:	31 09       	sbc	r19, r1
	p->pid = ++Last_PID;
	p->pri = py;
	p->arg = arg;
	p->request = NONE;
	p->state = READY;
	p->sp = sp;					/* stack pointer into the "workSpace" */
     768:	33 87       	std	Z+11, r19	; 0x0b
     76a:	22 87       	std	Z+10, r18	; 0x0a
	p->code = f;				/* function to be executed as a task */
     76c:	e4 5f       	subi	r30, 0xF4	; 244
     76e:	fe 4f       	sbci	r31, 0xFE	; 254
     770:	d1 83       	std	Z+1, r29	; 0x01
     772:	c0 83       	st	Z, r28
	
	//No errors occured
	err = NO_ERR;
     774:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <err>
	
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	08 95       	ret

00000786 <Kernel_Create_Event>:
void Kernel_Create_Event(void)
{
	int i;
	
	//Make sure the system's events are not at max
	if(Event_Count >= MAXEVENT)
     786:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <Event_Count>
     78a:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <Event_Count+0x1>
     78e:	08 97       	sbiw	r24, 0x08	; 8
     790:	48 f4       	brcc	.+18     	; 0x7a4 <Kernel_Create_Event+0x1e>
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     792:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <Event>
     796:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <Event+0x1>
     79a:	89 2b       	or	r24, r25
     79c:	c9 f0       	breq	.+50     	; 0x7d0 <Kernel_Create_Event+0x4a>
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	04 c0       	rjmp	.+8      	; 0x7ac <Kernel_Create_Event+0x26>
	if(Event_Count >= MAXEVENT)
	{
		#ifdef DEBUG
		printf("Event_Init: Failed to create Event. The system is at its max event threshold.\n");
		#endif
		err = MAX_EVENT_ERR;
     7a4:	88 e0       	ldi	r24, 0x08	; 8
     7a6:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
		return;
     7aa:	08 95       	ret
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     7ac:	fc 01       	movw	r30, r24
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	e8 0f       	add	r30, r24
     7b4:	f9 1f       	adc	r31, r25
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	ea 57       	subi	r30, 0x7A	; 122
     7bc:	f9 4f       	sbci	r31, 0xF9	; 249
     7be:	20 81       	ld	r18, Z
     7c0:	31 81       	ldd	r19, Z+1	; 0x01
     7c2:	23 2b       	or	r18, r19
     7c4:	39 f0       	breq	.+14     	; 0x7d4 <Kernel_Create_Event+0x4e>
		err = MAX_EVENT_ERR;
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	88 30       	cpi	r24, 0x08	; 8
     7ca:	91 05       	cpc	r25, r1
     7cc:	79 f7       	brne	.-34     	; 0x7ac <Kernel_Create_Event+0x26>
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <Kernel_Create_Event+0x4e>
		if(Event[i].id == 0) break;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
	
	//Assign a new unique ID to the event. Note that the smallest valid Event ID is 1.
	Event[i].id = ++Last_EventID;
     7d4:	20 91 9a 17 	lds	r18, 0x179A	; 0x80179a <Last_EventID>
     7d8:	30 91 9b 17 	lds	r19, 0x179B	; 0x80179b <Last_EventID+0x1>
     7dc:	2f 5f       	subi	r18, 0xFF	; 255
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
     7e0:	30 93 9b 17 	sts	0x179B, r19	; 0x80179b <Last_EventID+0x1>
     7e4:	20 93 9a 17 	sts	0x179A, r18	; 0x80179a <Last_EventID>
     7e8:	fc 01       	movw	r30, r24
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	df 01       	movw	r26, r30
     7f0:	a8 0f       	add	r26, r24
     7f2:	b9 1f       	adc	r27, r25
     7f4:	aa 0f       	add	r26, r26
     7f6:	bb 1f       	adc	r27, r27
     7f8:	aa 57       	subi	r26, 0x7A	; 122
     7fa:	b9 4f       	sbci	r27, 0xF9	; 249
     7fc:	11 96       	adiw	r26, 0x01	; 1
     7fe:	3c 93       	st	X, r19
     800:	2e 93       	st	-X, r18
	Event[i].owner = 0;
     802:	fd 01       	movw	r30, r26
     804:	13 82       	std	Z+3, r1	; 0x03
     806:	12 82       	std	Z+2, r1	; 0x02
	++Event_Count;
     808:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <Event_Count>
     80c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <Event_Count+0x1>
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <Event_Count+0x1>
     816:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <Event_Count>
	err = NO_ERR;
     81a:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <err>
     81e:	08 95       	ret

00000820 <Kernel_Create_Mutex>:
/************************************************************************/
/*                  MUTEX RELATED KERNEL FUNCTIONS                      */
/************************************************************************/

void Kernel_Create_Mutex(void)
{
     820:	cf 93       	push	r28
	int i;
	
	//Make sure the system's mutexes are not at max
	if(Mutex_Count >= MAXMUTEX)
     822:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <Mutex_Count>
     826:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <Mutex_Count+0x1>
     82a:	08 97       	sbiw	r24, 0x08	; 8
     82c:	50 f4       	brcc	.+20     	; 0x842 <Kernel_Create_Mutex+0x22>
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
		if(Mutex[i].id == 0) break;
     82e:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <Mutex>
     832:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <Mutex+0x1>
     836:	89 2b       	or	r24, r25
     838:	c9 f0       	breq	.+50     	; 0x86c <Kernel_Create_Mutex+0x4c>
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	2b e5       	ldi	r18, 0x5B	; 91
     840:	04 c0       	rjmp	.+8      	; 0x84a <Kernel_Create_Mutex+0x2a>
	if(Mutex_Count >= MAXMUTEX)
	{
		#ifdef DEBUG
		printf("Kernel_Create_Mutex: Failed to create Mutex. The system is at its max mutex threshold.\n");
		#endif
		err = MAX_MUTEX_ERR;
     842:	8c e0       	ldi	r24, 0x0C	; 12
     844:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
		return;
     848:	6b c0       	rjmp	.+214    	; 0x920 <Kernel_Create_Mutex+0x100>
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
		if(Mutex[i].id == 0) break;
     84a:	24 9f       	mul	r18, r20
     84c:	f0 01       	movw	r30, r0
     84e:	25 9f       	mul	r18, r21
     850:	f0 0d       	add	r31, r0
     852:	11 24       	eor	r1, r1
     854:	e2 55       	subi	r30, 0x52	; 82
     856:	fc 4f       	sbci	r31, 0xFC	; 252
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	89 2b       	or	r24, r25
     85e:	41 f0       	breq	.+16     	; 0x870 <Kernel_Create_Mutex+0x50>
		err = MAX_MUTEX_ERR;
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
     860:	4f 5f       	subi	r20, 0xFF	; 255
     862:	5f 4f       	sbci	r21, 0xFF	; 255
     864:	48 30       	cpi	r20, 0x08	; 8
     866:	51 05       	cpc	r21, r1
     868:	81 f7       	brne	.-32     	; 0x84a <Kernel_Create_Mutex+0x2a>
     86a:	02 c0       	rjmp	.+4      	; 0x870 <Kernel_Create_Mutex+0x50>
		if(Mutex[i].id == 0) break;
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
     870:	80 91 a1 17 	lds	r24, 0x17A1	; 0x8017a1 <Last_MutexID>
     874:	90 91 a2 17 	lds	r25, 0x17A2	; 0x8017a2 <Last_MutexID+0x1>
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	90 93 a2 17 	sts	0x17A2, r25	; 0x8017a2 <Last_MutexID+0x1>
     87e:	80 93 a1 17 	sts	0x17A1, r24	; 0x8017a1 <Last_MutexID>
     882:	2b e5       	ldi	r18, 0x5B	; 91
     884:	24 9f       	mul	r18, r20
     886:	f0 01       	movw	r30, r0
     888:	25 9f       	mul	r18, r21
     88a:	f0 0d       	add	r31, r0
     88c:	11 24       	eor	r1, r1
     88e:	e2 55       	subi	r30, 0x52	; 82
     890:	fc 4f       	sbci	r31, 0xFC	; 252
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	80 83       	st	Z, r24
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
     896:	13 82       	std	Z+3, r1	; 0x03
     898:	12 82       	std	Z+2, r1	; 0x02
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     89e:	6b e5       	ldi	r22, 0x5B	; 91
     8a0:	64 9f       	mul	r22, r20
     8a2:	90 01       	movw	r18, r0
     8a4:	65 9f       	mul	r22, r21
     8a6:	30 0d       	add	r19, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	df 01       	movw	r26, r30
     8ac:	cb e0       	ldi	r28, 0x0B	; 11
		Mutex[i].blocked_stack[j] = -1;
     8ae:	6f ef       	ldi	r22, 0xFF	; 255
     8b0:	7f ef       	ldi	r23, 0xFF	; 255
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     8b2:	fd 01       	movw	r30, r26
     8b4:	e8 0f       	add	r30, r24
     8b6:	f9 1f       	adc	r31, r25
     8b8:	c6 a3       	std	Z+38, r28	; 0x26
		Mutex[i].blocked_stack[j] = -1;
     8ba:	fc 01       	movw	r30, r24
     8bc:	33 96       	adiw	r30, 0x03	; 3
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	e2 0f       	add	r30, r18
     8c4:	f3 1f       	adc	r31, r19
     8c6:	e2 55       	subi	r30, 0x52	; 82
     8c8:	fc 4f       	sbci	r31, 0xFC	; 252
     8ca:	71 83       	std	Z+1, r23	; 0x01
     8cc:	60 83       	st	Z, r22
		Mutex[i].order[j] = 0;
     8ce:	fc 01       	movw	r30, r24
     8d0:	7b 96       	adiw	r30, 0x1b	; 27
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	e2 0f       	add	r30, r18
     8d8:	f3 1f       	adc	r31, r19
     8da:	e2 55       	subi	r30, 0x52	; 82
     8dc:	fc 4f       	sbci	r31, 0xFC	; 252
     8de:	11 82       	std	Z+1, r1	; 0x01
     8e0:	10 82       	st	Z, r1
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	80 31       	cpi	r24, 0x10	; 16
     8e6:	91 05       	cpc	r25, r1
     8e8:	21 f7       	brne	.-56     	; 0x8b2 <Kernel_Create_Mutex+0x92>
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
		Mutex[i].blocked_stack[j] = -1;
		Mutex[i].order[j] = 0;
	}
	Mutex[i].num_of_process = 0;
     8ea:	2b e5       	ldi	r18, 0x5B	; 91
     8ec:	24 9f       	mul	r18, r20
     8ee:	c0 01       	movw	r24, r0
     8f0:	25 9f       	mul	r18, r21
     8f2:	90 0d       	add	r25, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	82 55       	subi	r24, 0x52	; 82
     8f8:	9c 4f       	sbci	r25, 0xFC	; 252
     8fa:	fc 01       	movw	r30, r24
     8fc:	ea 5a       	subi	r30, 0xAA	; 170
     8fe:	ff 4f       	sbci	r31, 0xFF	; 255
     900:	11 82       	std	Z+1, r1	; 0x01
     902:	10 82       	st	Z, r1
	Mutex[i].total_num = 0;
     904:	32 96       	adiw	r30, 0x02	; 2
     906:	11 82       	std	Z+1, r1	; 0x01
     908:	10 82       	st	Z, r1
	++Mutex_Count;
     90a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <Mutex_Count>
     90e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <Mutex_Count+0x1>
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <Mutex_Count+0x1>
     918:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <Mutex_Count>
	err = NO_ERR;
     91c:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <err>
	#ifdef DEBUG
	printf("Kernel_Create_Mutex: Created Mutex %d!\n", Last_MutexID);
	#endif
	
	
}
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <Timer_init>:
void Timer_init()
{
	/*Timer1 is configured for the task*/
	
	//Use Prescaler = 256
	TCCR1B |= (1<<CS12);
     924:	e1 e8       	ldi	r30, 0x81	; 129
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	84 60       	ori	r24, 0x04	; 4
     92c:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<CS11)|(1<<CS10));
     92e:	80 81       	ld	r24, Z
     930:	8c 7f       	andi	r24, 0xFC	; 252
     932:	80 83       	st	Z, r24
	
	//Use CTC mode (mode 4)
	TCCR1B |= (1<<WGM12);
     934:	80 81       	ld	r24, Z
     936:	88 60       	ori	r24, 0x08	; 8
     938:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<WGM13)|(1<<WGM11)|(1<<WGM10));
     93a:	80 81       	ld	r24, Z
     93c:	8c 7e       	andi	r24, 0xEC	; 236
     93e:	80 83       	st	Z, r24
	
	OCR1A = TICK_LENG;			//Set timer top comparison value to ~10ms
     940:	81 e7       	ldi	r24, 0x71	; 113
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     948:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	TCNT1 = 0;					//Load initial value for timer
     94c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     950:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 |= (1<<OCIE1A);      //enable match for OCR1A interrupt
     954:	ef e6       	ldi	r30, 0x6F	; 111
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	82 60       	ori	r24, 0x02	; 2
     95c:	80 83       	st	Z, r24
     95e:	08 95       	ret

00000960 <Kernel_Reset>:
/*This function initializes the RTOS and must be called before any othersystem calls.*/
void Kernel_Reset()
{
	int x;
	
	Task_Count = 0;
     960:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <Task_Count+0x1>
     964:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <Task_Count>
	Event_Count = 0;
     968:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <Event_Count+0x1>
     96c:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <Event_Count>
	KernelActive = 0;
     970:	10 92 99 17 	sts	0x1799, r1	; 0x801799 <KernelActive+0x1>
     974:	10 92 98 17 	sts	0x1798, r1	; 0x801798 <KernelActive>
	Tick_Count = 0;
     978:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     97c:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
	Last_Dispatched = 0;
     980:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <Last_Dispatched+0x1>
     984:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <Last_Dispatched>
	Last_PID = 0;
     988:	10 92 97 17 	sts	0x1797, r1	; 0x801797 <Last_PID+0x1>
     98c:	10 92 96 17 	sts	0x1796, r1	; 0x801796 <Last_PID>
	Last_EventID = 0;
     990:	10 92 9b 17 	sts	0x179B, r1	; 0x80179b <Last_EventID+0x1>
     994:	10 92 9a 17 	sts	0x179A, r1	; 0x80179a <Last_EventID>
	Last_MutexID = 0;
     998:	10 92 a2 17 	sts	0x17A2, r1	; 0x8017a2 <Last_MutexID+0x1>
     99c:	10 92 a1 17 	sts	0x17A1, r1	; 0x8017a1 <Last_MutexID>
	err = NO_ERR;
     9a0:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <err>
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
     9a4:	80 ee       	ldi	r24, 0xE0	; 224
     9a6:	90 e1       	ldi	r25, 0x10	; 16
     9a8:	e6 eb       	ldi	r30, 0xB6	; 182
     9aa:	f6 e0       	ldi	r31, 0x06	; 6
     9ac:	df 01       	movw	r26, r30
     9ae:	9c 01       	movw	r18, r24
     9b0:	1d 92       	st	X+, r1
     9b2:	21 50       	subi	r18, 0x01	; 1
     9b4:	30 40       	sbci	r19, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <Kernel_Reset+0x50>
	for (x = 0; x < MAXTHREAD; x++) {
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
		Process[x].state = DEAD;
     9bc:	2e e0       	ldi	r18, 0x0E	; 14
     9be:	31 e0       	ldi	r19, 0x01	; 1
     9c0:	82 9f       	mul	r24, r18
     9c2:	f0 01       	movw	r30, r0
     9c4:	83 9f       	mul	r24, r19
     9c6:	f0 0d       	add	r31, r0
     9c8:	92 9f       	mul	r25, r18
     9ca:	f0 0d       	add	r31, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	ea 54       	subi	r30, 0x4A	; 74
     9d0:	f9 4f       	sbci	r31, 0xF9	; 249
     9d2:	13 82       	std	Z+3, r1	; 0x03
	Last_MutexID = 0;
	err = NO_ERR;
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
	for (x = 0; x < MAXTHREAD; x++) {
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	80 31       	cpi	r24, 0x10	; 16
     9d8:	91 05       	cpc	r25, r1
     9da:	91 f7       	brne	.-28     	; 0x9c0 <Kernel_Reset+0x60>
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
     9dc:	80 e3       	ldi	r24, 0x30	; 48
     9de:	e6 e8       	ldi	r30, 0x86	; 134
     9e0:	f6 e0       	ldi	r31, 0x06	; 6
     9e2:	df 01       	movw	r26, r30
     9e4:	1d 92       	st	X+, r1
     9e6:	8a 95       	dec	r24
     9e8:	e9 f7       	brne	.-6      	; 0x9e4 <Kernel_Reset+0x84>
	for (x = 0; x < MAXEVENT; x++) {
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
		Event[x].id = 0;
     9ee:	fc 01       	movw	r30, r24
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	e8 0f       	add	r30, r24
     9f6:	f9 1f       	adc	r31, r25
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	ea 57       	subi	r30, 0x7A	; 122
     9fe:	f9 4f       	sbci	r31, 0xF9	; 249
     a00:	11 82       	std	Z+1, r1	; 0x01
     a02:	10 82       	st	Z, r1
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
	for (x = 0; x < MAXEVENT; x++) {
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	88 30       	cpi	r24, 0x08	; 8
     a08:	91 05       	cpc	r25, r1
     a0a:	89 f7       	brne	.-30     	; 0x9ee <Kernel_Reset+0x8e>
		Event[x].id = 0;
	}
	
	//Clear and initialize the memory used for Mutex
	memset(Mutex, 0, MAXMUTEX*sizeof(MUTEX_TYPE));
     a0c:	88 ed       	ldi	r24, 0xD8	; 216
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	ee ea       	ldi	r30, 0xAE	; 174
     a12:	f3 e0       	ldi	r31, 0x03	; 3
     a14:	df 01       	movw	r26, r30
     a16:	9c 01       	movw	r18, r24
     a18:	1d 92       	st	X+, r1
     a1a:	21 50       	subi	r18, 0x01	; 1
     a1c:	30 40       	sbci	r19, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <Kernel_Reset+0xb8>
	for (x = 0; x < MAXMUTEX; x++) {
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
		Event[x].id = 0;
     a24:	fc 01       	movw	r30, r24
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	e8 0f       	add	r30, r24
     a2c:	f9 1f       	adc	r31, r25
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	ea 57       	subi	r30, 0x7A	; 122
     a34:	f9 4f       	sbci	r31, 0xF9	; 249
     a36:	11 82       	std	Z+1, r1	; 0x01
     a38:	10 82       	st	Z, r1
		Event[x].id = 0;
	}
	
	//Clear and initialize the memory used for Mutex
	memset(Mutex, 0, MAXMUTEX*sizeof(MUTEX_TYPE));
	for (x = 0; x < MAXMUTEX; x++) {
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	88 30       	cpi	r24, 0x08	; 8
     a3e:	91 05       	cpc	r25, r1
     a40:	89 f7       	brne	.-30     	; 0xa24 <Kernel_Reset+0xc4>
	
	#ifdef DEBUG
	printf("OS initialized!\n");
	#endif
	
	DDRB = (1<<PB2);	//pin 51
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	84 b9       	out	0x04, r24	; 4
     a46:	08 95       	ret

00000a48 <Kernel_Start>:
}

/* This function starts the RTOS after creating a few tasks.*/
void Kernel_Start()
{
     a48:	2f 92       	push	r2
     a4a:	3f 92       	push	r3
     a4c:	4f 92       	push	r4
     a4e:	5f 92       	push	r5
     a50:	6f 92       	push	r6
     a52:	7f 92       	push	r7
     a54:	8f 92       	push	r8
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <Kernel_Start+0x26>
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
	if ( (!KernelActive) && (Task_Count > 0))
     a72:	80 91 98 17 	lds	r24, 0x1798	; 0x801798 <KernelActive>
     a76:	90 91 99 17 	lds	r25, 0x1799	; 0x801799 <KernelActive+0x1>
     a7a:	89 2b       	or	r24, r25
     a7c:	09 f0       	breq	.+2      	; 0xa80 <Kernel_Start+0x38>
     a7e:	68 c3       	rjmp	.+1744   	; 0x1150 <Kernel_Start+0x708>
     a80:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <Task_Count>
     a84:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <Task_Count+0x1>
     a88:	89 2b       	or	r24, r25
     a8a:	09 f4       	brne	.+2      	; 0xa8e <Kernel_Start+0x46>
     a8c:	61 c3       	rjmp	.+1730   	; 0x1150 <Kernel_Start+0x708>
	{
		Disable_Interrupt();
     a8e:	f8 94       	cli
		
		/* we may have to initialize the interrupt vector for Enter_Kernel() here. */
			/* here we go...  */
		KernelActive = 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	90 93 99 17 	sts	0x1799, r25	; 0x801799 <KernelActive+0x1>
     a98:	80 93 98 17 	sts	0x1798, r24	; 0x801798 <KernelActive>
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() 
{
	Dispatch();	//Select an initial task to run
     a9c:	43 df       	rcall	.-378    	; 0x924 <Timer_init>
			Dispatch();
			break;
       
			//Invalid request code, just ignore
			default:
				err = INVALID_KERNET_REQUEST_ERR;
     a9e:	9e dd       	rcall	.-1220   	; 0x5dc <Dispatch>
     aa0:	68 94       	set
     aa2:	99 24       	eor	r9, r9
			//Does this need dispatch under any circumstances?
			break;
		   
			case YIELD:
			case NONE:					// NONE could be caused by a timer interrupt
			Cp->state = READY;
     aa4:	91 f8       	bld	r9, 1
     aa6:	bb 24       	eor	r11, r11
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
     aa8:	b3 94       	inc	r11
     aaa:	0f 2e       	mov	r0, r31
     aac:	fb e0       	ldi	r31, 0x0B	; 11
     aae:	af 2e       	mov	r10, r31
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			}
		}
		//dequeue index i
		m->blocked_stack[i] = -1;
     ab0:	f0 2d       	mov	r31, r0
     ab2:	44 24       	eor	r4, r4
     ab4:	4a 94       	dec	r4
	
	// if mutex is free
	if(m->owner == 0)
	{
		m->owner = Cp->pid;
		m->count = 1;
     ab6:	54 2c       	mov	r5, r4
     ab8:	22 24       	eor	r2, r2
     aba:	23 94       	inc	r2
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
		if (Mutex[index].owner == Cp->pid) {
     abc:	31 2c       	mov	r3, r1
     abe:	0f 2e       	mov	r0, r31
     ac0:	fb e5       	ldi	r31, 0x5B	; 91
     ac2:	cf 2e       	mov	r12, r31
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
     ac4:	f0 2d       	mov	r31, r0
     ac6:	81 2c       	mov	r8, r1
	//After OS initialization, THIS WILL BE KERNEL'S MAIN LOOP!
	//NOTE: When another task makes a syscall and enters the loop, it's still in the RUNNING state!
	while(1) 
	{
		//Clears the process' request fields
		Cp->request = NONE;
     ac8:	19 82       	std	Y+1, r1	; 0x01
     aca:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
     ace:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
		//Cp->request_arg is not reset, because task_sleep uses it to keep track of remaining ticks

		//Load the current task's stack pointer and switch to its context
		CurrentSp = Cp->sp;
     ad2:	15 82       	std	Z+5, r1	; 0x05
     ad4:	82 85       	ldd	r24, Z+10	; 0x0a
     ad6:	93 85       	ldd	r25, Z+11	; 0x0b
     ad8:	90 93 9e 17 	sts	0x179E, r25	; 0x80179e <CurrentSp+0x1>
		Exit_Kernel();
     adc:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <CurrentSp>

		/* if this task makes a system call, it will return to here! */

		//Save the current task's stack pointer and proceed to handle its request
		Cp->sp = CurrentSp;
     ae0:	30 db       	rcall	.-2464   	; 0x142 <CSwitch>
     ae2:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
     ae6:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
     aea:	80 91 9d 17 	lds	r24, 0x179D	; 0x80179d <CurrentSp>
     aee:	90 91 9e 17 	lds	r25, 0x179E	; 0x80179e <CurrentSp+0x1>
		
		//Check if any timer ticks came in
		Kernel_Tick_Handler();
     af2:	93 87       	std	Z+11, r25	; 0x0b
     af4:	82 87       	std	Z+10, r24	; 0x0a

		switch(Cp->request)
     af6:	fb dc       	rcall	.-1546   	; 0x4ee <Kernel_Tick_Handler>
     af8:	e0 90 9f 17 	lds	r14, 0x179F	; 0x80179f <Cp>
     afc:	f0 90 a0 17 	lds	r15, 0x17A0	; 0x8017a0 <Cp+0x1>
     b00:	fb 82       	std	Y+3, r15	; 0x03
     b02:	ea 82       	std	Y+2, r14	; 0x02
     b04:	d7 01       	movw	r26, r14
     b06:	15 96       	adiw	r26, 0x05	; 5
     b08:	8c 91       	ld	r24, X
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	8d 30       	cpi	r24, 0x0D	; 13
     b0e:	91 05       	cpc	r25, r1
     b10:	08 f0       	brcs	.+2      	; 0xb14 <Kernel_Start+0xcc>
     b12:	1b c3       	rjmp	.+1590   	; 0x114a <Kernel_Start+0x702>
     b14:	fc 01       	movw	r30, r24
     b16:	88 27       	eor	r24, r24
     b18:	ee 58       	subi	r30, 0x8E	; 142
     b1a:	ff 4f       	sbci	r31, 0xFF	; 255
     b1c:	8f 4f       	sbci	r24, 0xFF	; 255
		{
			case CREATE_T:
			Kernel_Create_Task(Cp->code, Cp->pri, Cp->arg);
     b1e:	74 c4       	rjmp	.+2280   	; 0x1408 <__tablejump2__>
     b20:	aa 81       	ldd	r26, Y+2	; 0x02
     b22:	bb 81       	ldd	r27, Y+3	; 0x03
     b24:	18 96       	adiw	r26, 0x08	; 8
     b26:	4d 91       	ld	r20, X+
     b28:	5c 91       	ld	r21, X
     b2a:	19 97       	sbiw	r26, 0x09	; 9
     b2c:	12 96       	adiw	r26, 0x02	; 2
     b2e:	6c 91       	ld	r22, X
     b30:	12 97       	sbiw	r26, 0x02	; 2
     b32:	a4 5f       	subi	r26, 0xF4	; 244
     b34:	be 4f       	sbci	r27, 0xFE	; 254
     b36:	8d 91       	ld	r24, X+
     b38:	9c 91       	ld	r25, X
     b3a:	a2 dd       	rcall	.-1212   	; 0x680 <Kernel_Create_Task>
		Cp->sp = CurrentSp;
		
		//Check if any timer ticks came in
		Kernel_Tick_Handler();

		switch(Cp->request)
     b3c:	c6 cf       	rjmp	.-116    	; 0xaca <Kernel_Start+0x82>
     b3e:	00 e0       	ldi	r16, 0x00	; 0
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
		if (Mutex[index].owner == Cp->pid) {
     b40:	10 e0       	ldi	r17, 0x00	; 0
     b42:	c0 9e       	mul	r12, r16
     b44:	f0 01       	movw	r30, r0
     b46:	c1 9e       	mul	r12, r17
     b48:	f0 0d       	add	r31, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	e2 55       	subi	r30, 0x52	; 82
     b4e:	fc 4f       	sbci	r31, 0xFC	; 252
     b50:	22 81       	ldd	r18, Z+2	; 0x02
     b52:	33 81       	ldd	r19, Z+3	; 0x03
     b54:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
     b58:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
     b5c:	80 81       	ld	r24, Z
     b5e:	91 81       	ldd	r25, Z+1	; 0x01
     b60:	28 17       	cp	r18, r24
     b62:	39 07       	cpc	r19, r25
     b64:	09 f0       	breq	.+2      	; 0xb68 <Kernel_Start+0x120>
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
     b66:	ac c0       	rjmp	.+344    	; 0xcc0 <Kernel_Start+0x278>
     b68:	c0 9e       	mul	r12, r16
     b6a:	f0 01       	movw	r30, r0
     b6c:	c1 9e       	mul	r12, r17
     b6e:	f0 0d       	add	r31, r0
     b70:	11 24       	eor	r1, r1
     b72:	ec 5f       	subi	r30, 0xFC	; 252
     b74:	fb 4f       	sbci	r31, 0xFB	; 251
     b76:	80 81       	ld	r24, Z
     b78:	91 81       	ldd	r25, Z+1	; 0x01
     b7a:	89 2b       	or	r24, r25
     b7c:	09 f4       	brne	.+2      	; 0xb80 <Kernel_Start+0x138>
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
				unsigned int temp_order = Mutex[index].total_num + 1;
     b7e:	95 c0       	rjmp	.+298    	; 0xcaa <Kernel_Start+0x262>
     b80:	c0 9e       	mul	r12, r16
     b82:	f0 01       	movw	r30, r0
     b84:	c1 9e       	mul	r12, r17
     b86:	f0 0d       	add	r31, r0
     b88:	11 24       	eor	r1, r1
     b8a:	ea 5f       	subi	r30, 0xFA	; 250
     b8c:	fb 4f       	sbci	r31, 0xFB	; 251
     b8e:	60 81       	ld	r22, Z
     b90:	71 81       	ldd	r23, Z+1	; 0x01
     b92:	6f 5f       	subi	r22, 0xFF	; 255
	for (index=0; index<MAXMUTEX; index++) {
		if (Mutex[index].owner == Cp->pid) {
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
     b94:	7f 4f       	sbci	r23, 0xFF	; 255
     b96:	8a 82       	std	Y+2, r8	; 0x02
     b98:	e9 80       	ldd	r14, Y+1	; 0x01
				unsigned int temp_order = Mutex[index].total_num + 1;
				PRIORITY temp_pri = LOWEST_PRIORITY + 1;
     b9a:	eb 82       	std	Y+3, r14	; 0x03
				int i;
				for (i=0; i<MAXTHREAD; i++) {
     b9c:	fa 2c       	mov	r15, r10
     b9e:	80 e0       	ldi	r24, 0x00	; 0
					if (Mutex[index].priority_stack[i] < temp_pri) {
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	c0 9e       	mul	r12, r16
     ba4:	a0 01       	movw	r20, r0
     ba6:	c1 9e       	mul	r12, r17
     ba8:	50 0d       	add	r21, r0
     baa:	11 24       	eor	r1, r1
     bac:	9a 01       	movw	r18, r20
     bae:	22 55       	subi	r18, 0x52	; 82
     bb0:	3c 4f       	sbci	r19, 0xFC	; 252
     bb2:	f9 01       	movw	r30, r18
     bb4:	e8 0f       	add	r30, r24
     bb6:	f9 1f       	adc	r31, r25
     bb8:	e6 a1       	ldd	r30, Z+38	; 0x26
     bba:	ef 15       	cp	r30, r15
						// found a task with higher priority
						temp_pri = Mutex[index].priority_stack[i];
     bbc:	d8 f4       	brcc	.+54     	; 0xbf4 <Kernel_Start+0x1ac>
     bbe:	f9 01       	movw	r30, r18
     bc0:	e8 0f       	add	r30, r24
     bc2:	f9 1f       	adc	r31, r25
						temp_order = Mutex[index].order[i];
     bc4:	f6 a0       	ldd	r15, Z+38	; 0x26
     bc6:	fc 01       	movw	r30, r24
     bc8:	7b 96       	adiw	r30, 0x1b	; 27
     bca:	ee 0f       	add	r30, r30
     bcc:	ff 1f       	adc	r31, r31
     bce:	e4 0f       	add	r30, r20
     bd0:	f5 1f       	adc	r31, r21
     bd2:	e2 55       	subi	r30, 0x52	; 82
     bd4:	fc 4f       	sbci	r31, 0xFC	; 252
     bd6:	60 81       	ld	r22, Z
						p_dequeue = Mutex[index].blocked_stack[i];
     bd8:	71 81       	ldd	r23, Z+1	; 0x01
     bda:	fc 01       	movw	r30, r24
     bdc:	33 96       	adiw	r30, 0x03	; 3
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	e4 0f       	add	r30, r20
     be4:	f5 1f       	adc	r31, r21
     be6:	e2 55       	subi	r30, 0x52	; 82
     be8:	fc 4f       	sbci	r31, 0xFC	; 252
     bea:	a0 81       	ld	r26, Z
     bec:	b1 81       	ldd	r27, Z+1	; 0x01
     bee:	bb 83       	std	Y+3, r27	; 0x03
     bf0:	aa 83       	std	Y+2, r26	; 0x02
						} else if (Mutex[index].priority_stack[i] == temp_pri && temp_order < Mutex[index].order[i]) {
     bf2:	2d c0       	rjmp	.+90     	; 0xc4e <Kernel_Start+0x206>
     bf4:	f9 01       	movw	r30, r18
     bf6:	e8 0f       	add	r30, r24
     bf8:	f9 1f       	adc	r31, r25
     bfa:	a6 a1       	ldd	r26, Z+38	; 0x26
     bfc:	af 11       	cpse	r26, r15
     bfe:	27 c0       	rjmp	.+78     	; 0xc4e <Kernel_Start+0x206>
     c00:	fc 01       	movw	r30, r24
     c02:	7b 96       	adiw	r30, 0x1b	; 27
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	e4 0f       	add	r30, r20
     c0a:	f5 1f       	adc	r31, r21
     c0c:	e2 55       	subi	r30, 0x52	; 82
     c0e:	fc 4f       	sbci	r31, 0xFC	; 252
     c10:	01 90       	ld	r0, Z+
     c12:	f0 81       	ld	r31, Z
     c14:	e0 2d       	mov	r30, r0
     c16:	6e 17       	cp	r22, r30
     c18:	7f 07       	cpc	r23, r31
						// same priority and came into the queue earlier
						temp_order = Mutex[index].order[i];
     c1a:	c0 f4       	brcc	.+48     	; 0xc4c <Kernel_Start+0x204>
     c1c:	fc 01       	movw	r30, r24
     c1e:	7b 96       	adiw	r30, 0x1b	; 27
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	e4 0f       	add	r30, r20
     c26:	f5 1f       	adc	r31, r21
     c28:	e2 55       	subi	r30, 0x52	; 82
     c2a:	fc 4f       	sbci	r31, 0xFC	; 252
     c2c:	60 81       	ld	r22, Z
						p_dequeue = Mutex[index].blocked_stack[i];
     c2e:	71 81       	ldd	r23, Z+1	; 0x01
     c30:	fc 01       	movw	r30, r24
     c32:	33 96       	adiw	r30, 0x03	; 3
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	e4 0f       	add	r30, r20
     c3a:	f5 1f       	adc	r31, r21
     c3c:	e2 55       	subi	r30, 0x52	; 82
     c3e:	fc 4f       	sbci	r31, 0xFC	; 252
     c40:	e0 80       	ld	r14, Z
     c42:	f1 80       	ldd	r15, Z+1	; 0x01
     c44:	fb 82       	std	Y+3, r15	; 0x03
     c46:	ea 82       	std	Y+2, r14	; 0x02
     c48:	fa 2e       	mov	r15, r26
					if (Mutex[index].priority_stack[i] < temp_pri) {
						// found a task with higher priority
						temp_pri = Mutex[index].priority_stack[i];
						temp_order = Mutex[index].order[i];
						p_dequeue = Mutex[index].blocked_stack[i];
						} else if (Mutex[index].priority_stack[i] == temp_pri && temp_order < Mutex[index].order[i]) {
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <Kernel_Start+0x206>
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
				unsigned int temp_order = Mutex[index].total_num + 1;
				PRIORITY temp_pri = LOWEST_PRIORITY + 1;
				int i;
				for (i=0; i<MAXTHREAD; i++) {
     c4c:	fa 2e       	mov	r15, r26
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	80 31       	cpi	r24, 0x10	; 16
     c52:	91 05       	cpc	r25, r1
     c54:	09 f0       	breq	.+2      	; 0xc58 <Kernel_Start+0x210>
						temp_order = Mutex[index].order[i];
						p_dequeue = Mutex[index].blocked_stack[i];
					}
				}
				//dequeue index i
				Mutex[index].blocked_stack[i] = -1;
     c56:	ad cf       	rjmp	.-166    	; 0xbb2 <Kernel_Start+0x16a>
     c58:	c0 9e       	mul	r12, r16
     c5a:	c0 01       	movw	r24, r0
     c5c:	c1 9e       	mul	r12, r17
     c5e:	90 0d       	add	r25, r0
     c60:	11 24       	eor	r1, r1
     c62:	9c 01       	movw	r18, r24
     c64:	22 55       	subi	r18, 0x52	; 82
     c66:	3c 4f       	sbci	r19, 0xFC	; 252
     c68:	39 01       	movw	r6, r18
     c6a:	d9 01       	movw	r26, r18
     c6c:	97 96       	adiw	r26, 0x27	; 39
     c6e:	5c 92       	st	X, r5
     c70:	4e 92       	st	-X, r4
				Mutex[index].priority_stack[i] = LOWEST_PRIORITY+1;
     c72:	96 97       	sbiw	r26, 0x26	; 38
     c74:	d6 96       	adiw	r26, 0x36	; 54
				Mutex[index].order[i] = 0;
     c76:	ac 92       	st	X, r10
     c78:	f9 01       	movw	r30, r18
     c7a:	ea 5a       	subi	r30, 0xAA	; 170
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	11 82       	std	Z+1, r1	; 0x01
				--(Mutex[index].num_of_process);
     c80:	10 82       	st	Z, r1
     c82:	80 81       	ld	r24, Z
     c84:	91 81       	ldd	r25, Z+1	; 0x01
     c86:	01 97       	sbiw	r24, 0x01	; 1
				PD* target_p = findProcessByPID(p_dequeue);
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	80 83       	st	Z, r24
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	9b 81       	ldd	r25, Y+3	; 0x03
				Mutex[index].owner = p_dequeue;
     c90:	3f db       	rcall	.-2434   	; 0x310 <findProcessByPID>
     c92:	2a 81       	ldd	r18, Y+2	; 0x02
     c94:	3b 81       	ldd	r19, Y+3	; 0x03
     c96:	f3 01       	movw	r30, r6
     c98:	33 83       	std	Z+3, r19	; 0x03
				Mutex[index].own_pri = temp_pri;			//keep track of new owner's priority;
     c9a:	22 83       	std	Z+2, r18	; 0x02
     c9c:	e6 5a       	subi	r30, 0xA6	; 166
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
				target_p->state = READY;
     ca0:	f0 82       	st	Z, r15
     ca2:	dc 01       	movw	r26, r24
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	bc 92       	st	X, r11
			} else {
				Mutex[index].owner = 0;
     ca8:	0b c0       	rjmp	.+22     	; 0xcc0 <Kernel_Start+0x278>
     caa:	c0 9e       	mul	r12, r16
     cac:	f0 01       	movw	r30, r0
     cae:	c1 9e       	mul	r12, r17
     cb0:	f0 0d       	add	r31, r0
     cb2:	11 24       	eor	r1, r1
     cb4:	e2 55       	subi	r30, 0x52	; 82
     cb6:	fc 4f       	sbci	r31, 0xFC	; 252
     cb8:	13 82       	std	Z+3, r1	; 0x03
				Mutex[index].count = 0;
     cba:	12 82       	std	Z+2, r1	; 0x02
     cbc:	15 82       	std	Z+5, r1	; 0x05
static void Kernel_Terminate_Task(void)
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
     cbe:	14 82       	std	Z+4, r1	; 0x04
     cc0:	0f 5f       	subi	r16, 0xFF	; 255
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	08 30       	cpi	r16, 0x08	; 8
     cc6:	11 05       	cpc	r17, r1
     cc8:	09 f0       	breq	.+2      	; 0xccc <Kernel_Start+0x284>
				Mutex[index].owner = 0;
				Mutex[index].count = 0;
			}
		}
	}
	Cp->state = DEAD;			//Mark the task as DEAD so its resources will be recycled later when new tasks are created
     cca:	3b cf       	rjmp	.-394    	; 0xb42 <Kernel_Start+0xfa>
     ccc:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
     cd0:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
	--Task_Count;
     cd4:	13 82       	std	Z+3, r1	; 0x03
     cd6:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <Task_Count>
     cda:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <Task_Count+0x1>
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <Task_Count+0x1>
	
	PORTB &= ~(1<<PB2);
     ce4:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <Task_Count>
			Kernel_Create_Task(Cp->code, Cp->pri, Cp->arg);
			break;
			
			case TERMINATE:
			Kernel_Terminate_Task();
			Dispatch();					//Dispatch is only needed if the syscall requires running a different task  after it's done
     ce8:	2a 98       	cbi	0x05, 2	; 5

/*TODO: Check for mutex ownership. If PID owns any mutex, ignore this request*/
static void Kernel_Suspend_Task() 
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
     cea:	78 dc       	rcall	.-1808   	; 0x5dc <Dispatch>
     cec:	ee ce       	rjmp	.-548    	; 0xaca <Kernel_Start+0x82>
     cee:	aa 81       	ldd	r26, Y+2	; 0x02
     cf0:	bb 81       	ldd	r27, Y+3	; 0x03
     cf2:	16 96       	adiw	r26, 0x06	; 6
     cf4:	8d 91       	ld	r24, X+
     cf6:	9c 91       	ld	r25, X
     cf8:	17 97       	sbiw	r26, 0x07	; 7
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
     cfa:	0a db       	rcall	.-2540   	; 0x310 <findProcessByPID>
     cfc:	00 97       	sbiw	r24, 0x00	; 0
	{
		#ifdef DEBUG
			printf("Kernel_Suspend_Task: PID not found in global process list!\n");
		#endif
		err = PID_NOT_FOUND_ERR;
     cfe:	21 f4       	brne	.+8      	; 0xd08 <Kernel_Start+0x2c0>
     d00:	85 e0       	ldi	r24, 0x05	; 5
     d02:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
		return;
	}
	
	//Ensure the task is not in a unsuspendable state
	if(p->state == DEAD || p->state == SUSPENDED)
     d06:	e1 ce       	rjmp	.-574    	; 0xaca <Kernel_Start+0x82>
     d08:	fc 01       	movw	r30, r24
     d0a:	23 81       	ldd	r18, Z+3	; 0x03
     d0c:	22 23       	and	r18, r18
     d0e:	11 f0       	breq	.+4      	; 0xd14 <Kernel_Start+0x2cc>
     d10:	23 30       	cpi	r18, 0x03	; 3
	{
		#ifdef DEBUG
		printf("Kernel_Suspend_Task: Trying to suspend a task that's in an unsuspendable state %d!\n", p->state);
		#endif
		err = SUSPEND_NONRUNNING_TASK_ERR;
     d12:	21 f4       	brne	.+8      	; 0xd1c <Kernel_Start+0x2d4>
     d14:	86 e0       	ldi	r24, 0x06	; 6
     d16:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
			return;
		}
	}*/
	
	//Save the process state, and set its current state to SUSPENDED
	if(p->state == RUNNING)
     d1a:	d7 ce       	rjmp	.-594    	; 0xaca <Kernel_Start+0x82>
     d1c:	22 30       	cpi	r18, 0x02	; 2
		p->last_state = READY;
     d1e:	11 f4       	brne	.+4      	; 0xd24 <Kernel_Start+0x2dc>
     d20:	b4 82       	std	Z+4, r11	; 0x04
	else
		p->last_state = p->state;
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <Kernel_Start+0x2e0>
     d24:	fc 01       	movw	r30, r24
		
	p->state = SUSPENDED;
     d26:	24 83       	std	Z+4, r18	; 0x04
     d28:	23 e0       	ldi	r18, 0x03	; 3
     d2a:	dc 01       	movw	r26, r24
	err = NO_ERR;
     d2c:	13 96       	adiw	r26, 0x03	; 3
     d2e:	2c 93       	st	X, r18
}

static void Kernel_Resume_Task()
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
     d30:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <err>
     d34:	ca ce       	rjmp	.-620    	; 0xaca <Kernel_Start+0x82>
     d36:	aa 81       	ldd	r26, Y+2	; 0x02
     d38:	bb 81       	ldd	r27, Y+3	; 0x03
     d3a:	16 96       	adiw	r26, 0x06	; 6
     d3c:	8d 91       	ld	r24, X+
     d3e:	9c 91       	ld	r25, X
     d40:	17 97       	sbiw	r26, 0x07	; 7
     d42:	e6 da       	rcall	.-2612   	; 0x310 <findProcessByPID>
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
     d44:	9b 83       	std	Y+3, r25	; 0x03
     d46:	8a 83       	std	Y+2, r24	; 0x02
	{
		#ifdef DEBUG
			printf("Kernel_Resume_Task: PID not found in global process list!\n");
		#endif
		err = PID_NOT_FOUND_ERR;
     d48:	89 2b       	or	r24, r25
     d4a:	21 f4       	brne	.+8      	; 0xd54 <Kernel_Start+0x30c>
     d4c:	85 e0       	ldi	r24, 0x05	; 5
     d4e:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
		return;
	}
	
	//Ensure the task is currently in the SUSPENDED state
	if(p->state != SUSPENDED)
     d52:	bb ce       	rjmp	.-650    	; 0xaca <Kernel_Start+0x82>
     d54:	ea 81       	ldd	r30, Y+2	; 0x02
     d56:	fb 81       	ldd	r31, Y+3	; 0x03
     d58:	83 81       	ldd	r24, Z+3	; 0x03
	{
		#ifdef DEBUG
		printf("Kernel_Resume_Task: Trying to resume a task that's not SUSPENDED!\n");
		printf("CURRENT STATE: %d\n", p->state);
		#endif
		err = RESUME_NONSUSPENDED_TASK_ERR;
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	21 f0       	breq	.+8      	; 0xd66 <Kernel_Start+0x31e>
     d5e:	87 e0       	ldi	r24, 0x07	; 7
		return;
	}
	
	//Restore the previous state of the task
	printf("***Last State: %d\n", p->last_state);
     d60:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
     d64:	b2 ce       	rjmp	.-668    	; 0xaca <Kernel_Start+0x82>
     d66:	aa 81       	ldd	r26, Y+2	; 0x02
     d68:	bb 81       	ldd	r27, Y+3	; 0x03
     d6a:	14 96       	adiw	r26, 0x04	; 4
     d6c:	8c 91       	ld	r24, X
     d6e:	1f 92       	push	r1
     d70:	8f 93       	push	r24
     d72:	eb e5       	ldi	r30, 0x5B	; 91
     d74:	f2 e0       	ldi	r31, 0x02	; 2
	if(p->last_state == RUNNING)
     d76:	ff 93       	push	r31
     d78:	ef 93       	push	r30
     d7a:	4e d3       	rcall	.+1692   	; 0x1418 <printf>
     d7c:	aa 81       	ldd	r26, Y+2	; 0x02
     d7e:	bb 81       	ldd	r27, Y+3	; 0x03
     d80:	14 96       	adiw	r26, 0x04	; 4
     d82:	8c 91       	ld	r24, X
     d84:	14 97       	sbiw	r26, 0x04	; 4
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
		p->state = READY;
     d8c:	0f 90       	pop	r0
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	19 f4       	brne	.+6      	; 0xd98 <Kernel_Start+0x350>
	else
		p->state = p->last_state;
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	bc 92       	st	X, r11
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <Kernel_Start+0x356>
		
	p->last_state = SUSPENDED;		//last_state is not needed once a task has resumed, but whatever	
     d98:	ea 81       	ldd	r30, Y+2	; 0x02
     d9a:	fb 81       	ldd	r31, Y+3	; 0x03
     d9c:	83 83       	std	Z+3, r24	; 0x03
	err = NO_ERR;
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	aa 81       	ldd	r26, Y+2	; 0x02
     da2:	bb 81       	ldd	r27, Y+3	; 0x03
			case RESUME:
			Kernel_Resume_Task();
			break;
			
			case SLEEP:
			Cp->state = SLEEPING;
     da4:	14 96       	adiw	r26, 0x04	; 4
     da6:	8c 93       	st	X, r24
     da8:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <err>
			Dispatch();					
     dac:	8e ce       	rjmp	.-740    	; 0xaca <Kernel_Start+0x82>
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	aa 81       	ldd	r26, Y+2	; 0x02
			break;
			
			case CREATE_E:
			Kernel_Create_Event();
     db2:	bb 81       	ldd	r27, Y+3	; 0x03
     db4:	13 96       	adiw	r26, 0x03	; 3
     db6:	8c 93       	st	X, r24
	
}

static void Kernel_Wait_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
     db8:	11 dc       	rcall	.-2014   	; 0x5dc <Dispatch>
     dba:	87 ce       	rjmp	.-754    	; 0xaca <Kernel_Start+0x82>
     dbc:	e4 dc       	rcall	.-1592   	; 0x786 <Kernel_Create_Event>
     dbe:	85 ce       	rjmp	.-758    	; 0xaca <Kernel_Start+0x82>
     dc0:	aa 81       	ldd	r26, Y+2	; 0x02
     dc2:	bb 81       	ldd	r27, Y+3	; 0x03
     dc4:	16 96       	adiw	r26, 0x06	; 6
     dc6:	8d 91       	ld	r24, X+
     dc8:	9c 91       	ld	r25, X
	
	if(e == NULL)
     dca:	17 97       	sbiw	r26, 0x07	; 7
     dcc:	d7 da       	rcall	.-2642   	; 0x37c <findEventByEventID>
		#endif
		return;
	}
	
	//Ensure no one else is waiting for this same event
	if(e->owner > 0 && e->owner != Cp->pid)
     dce:	fc 01       	movw	r30, r24
     dd0:	89 2b       	or	r24, r25
     dd2:	99 f1       	breq	.+102    	; 0xe3a <Kernel_Start+0x3f2>
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	69 f0       	breq	.+26     	; 0xdf6 <Kernel_Start+0x3ae>
     ddc:	a0 91 9f 17 	lds	r26, 0x179F	; 0x80179f <Cp>
     de0:	b0 91 a0 17 	lds	r27, 0x17A0	; 0x8017a0 <Cp+0x1>
     de4:	2d 91       	ld	r18, X+
     de6:	3c 91       	ld	r19, X
	{
		#ifdef DEBUG
			printf("Kernel_Wait_Event: The requested event is already being waited by PID %d\n", e->owner);
		#endif
		err = EVENT_NOT_FOUND_ERR;
     de8:	82 17       	cp	r24, r18
     dea:	93 07       	cpc	r25, r19
     dec:	21 f0       	breq	.+8      	; 0xdf6 <Kernel_Start+0x3ae>
     dee:	89 e0       	ldi	r24, 0x09	; 9
		return;
	}
	
	//Has this event been signaled already? If yes, "consume" event and keep executing the same task
	if(e->count > 0)
     df0:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
     df4:	22 c0       	rjmp	.+68     	; 0xe3a <Kernel_Start+0x3f2>
     df6:	84 81       	ldd	r24, Z+4	; 0x04
	{
		e->owner = 0;
     df8:	95 81       	ldd	r25, Z+5	; 0x05
     dfa:	89 2b       	or	r24, r25
		e->count = 0;
     dfc:	81 f0       	breq	.+32     	; 0xe1e <Kernel_Start+0x3d6>
     dfe:	13 82       	std	Z+3, r1	; 0x03
		e->id = 0;
     e00:	12 82       	std	Z+2, r1	; 0x02
     e02:	15 82       	std	Z+5, r1	; 0x05
		--Event_Count;	
     e04:	14 82       	std	Z+4, r1	; 0x04
     e06:	11 82       	std	Z+1, r1	; 0x01
     e08:	10 82       	st	Z, r1
     e0a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <Event_Count>
     e0e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <Event_Count+0x1>
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <Event_Count+0x1>
		return;
	}
	
	//Set the owner of the requested event to the current task and put it into the WAIT EVENT state
	e->owner = Cp->pid;
     e18:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <Event_Count>
     e1c:	0e c0       	rjmp	.+28     	; 0xe3a <Kernel_Start+0x3f2>
     e1e:	a0 91 9f 17 	lds	r26, 0x179F	; 0x80179f <Cp>
     e22:	b0 91 a0 17 	lds	r27, 0x17A0	; 0x8017a0 <Cp+0x1>
     e26:	8d 91       	ld	r24, X+
	Cp->state = WAIT_EVENT;
     e28:	9c 91       	ld	r25, X
     e2a:	11 97       	sbiw	r26, 0x01	; 1
     e2c:	93 83       	std	Z+3, r25	; 0x03
	err = NO_ERR;
     e2e:	82 83       	std	Z+2, r24	; 0x02
     e30:	85 e0       	ldi	r24, 0x05	; 5
			Kernel_Create_Event();
			break;
			
			case WAIT_E:
			Kernel_Wait_Event();	
			if(Cp->state != RUNNING) Dispatch();	//Don't dispatch to a different task if the event is already signaled
     e32:	13 96       	adiw	r26, 0x03	; 3
     e34:	8c 93       	st	X, r24
     e36:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <err>
     e3a:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
     e3e:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
     e42:	83 81       	ldd	r24, Z+3	; 0x03
     e44:	82 30       	cpi	r24, 0x02	; 2
	
}

static void Kernel_Signal_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
     e46:	09 f4       	brne	.+2      	; 0xe4a <Kernel_Start+0x402>
     e48:	40 ce       	rjmp	.-896    	; 0xaca <Kernel_Start+0x82>
     e4a:	c8 db       	rcall	.-2160   	; 0x5dc <Dispatch>
     e4c:	3e ce       	rjmp	.-900    	; 0xaca <Kernel_Start+0x82>
     e4e:	aa 81       	ldd	r26, Y+2	; 0x02
     e50:	bb 81       	ldd	r27, Y+3	; 0x03
     e52:	16 96       	adiw	r26, 0x06	; 6
     e54:	8d 91       	ld	r24, X+
     e56:	9c 91       	ld	r25, X
     e58:	17 97       	sbiw	r26, 0x07	; 7
	PD *e_owner;
	
	if(e == NULL)
     e5a:	90 da       	rcall	.-2784   	; 0x37c <findEventByEventID>
     e5c:	9b 83       	std	Y+3, r25	; 0x03
		#endif
		return;
	}
	
	//Increment the event counter if needed 
	if(MAX_EVENT_SIG_MISS == 0 || e->count < MAX_EVENT_SIG_MISS)
     e5e:	8a 83       	std	Y+2, r24	; 0x02
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	a1 f1       	breq	.+104    	; 0xecc <Kernel_Start+0x484>
     e64:	fc 01       	movw	r30, r24
		e->count++;
     e66:	84 81       	ldd	r24, Z+4	; 0x04
     e68:	95 81       	ldd	r25, Z+5	; 0x05
	
	//If the event is unowned, return
	if(e->owner == 0)
     e6a:	89 2b       	or	r24, r25
     e6c:	11 f4       	brne	.+4      	; 0xe72 <Kernel_Start+0x42a>
     e6e:	35 82       	std	Z+5, r3	; 0x05
     e70:	24 82       	std	Z+4, r2	; 0x04
     e72:	aa 81       	ldd	r26, Y+2	; 0x02
     e74:	bb 81       	ldd	r27, Y+3	; 0x03
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8d 91       	ld	r24, X+
	{
		#ifdef DEBUG
		printf("Kernel_Signal_Event: *WARNING* The requested event is not being waited by anyone!\n");
		#endif
		err = SIGNAL_UNOWNED_EVENT_ERR;
     e7a:	9c 91       	ld	r25, X
     e7c:	13 97       	sbiw	r26, 0x03	; 3
     e7e:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}
	
	//Fetch the owner's PD and ensure it's still valid
	e_owner = findProcessByPID(e->owner);
     e80:	19 f4       	brne	.+6      	; 0xe88 <Kernel_Start+0x440>
     e82:	a0 92 9c 17 	sts	0x179C, r10	; 0x80179c <err>
	if(e_owner == NULL)
     e86:	22 c0       	rjmp	.+68     	; 0xecc <Kernel_Start+0x484>
	{
		#ifdef DEBUG
		printf("Kernel_Signal_Event: Event owner's PID not found in global process list!\n");
		#endif
		err = PID_NOT_FOUND_ERR;
     e88:	43 da       	rcall	.-2938   	; 0x310 <findProcessByPID>
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	21 f4       	brne	.+8      	; 0xe96 <Kernel_Start+0x44e>
     e8e:	85 e0       	ldi	r24, 0x05	; 5
		return;
	}
	
	//Wake up the owner of the event by setting its state to READY if it's active. The event is "consumed"
	if(e_owner->state == WAIT_EVENT)
     e90:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
     e94:	1b c0       	rjmp	.+54     	; 0xecc <Kernel_Start+0x484>
     e96:	fc 01       	movw	r30, r24
	{
		e->owner = 0;
     e98:	23 81       	ldd	r18, Z+3	; 0x03
     e9a:	25 30       	cpi	r18, 0x05	; 5
     e9c:	b9 f4       	brne	.+46     	; 0xecc <Kernel_Start+0x484>
     e9e:	aa 81       	ldd	r26, Y+2	; 0x02
     ea0:	bb 81       	ldd	r27, Y+3	; 0x03
		e->count = 0;
     ea2:	13 96       	adiw	r26, 0x03	; 3
     ea4:	1c 92       	st	X, r1
		e->id = 0;
     ea6:	1e 92       	st	-X, r1
     ea8:	12 97       	sbiw	r26, 0x02	; 2
		--Event_Count;
     eaa:	15 96       	adiw	r26, 0x05	; 5
     eac:	1c 92       	st	X, r1
     eae:	1e 92       	st	-X, r1
     eb0:	14 97       	sbiw	r26, 0x04	; 4
     eb2:	1d 92       	st	X+, r1
     eb4:	1c 92       	st	X, r1
     eb6:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <Event_Count>
			if(Cp->state != RUNNING) Dispatch();	//Don't dispatch to a different task if the event is already signaled
			break;
			
			case SIGNAL_E:
			Kernel_Signal_Event();
			Dispatch();
     eba:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <Event_Count+0x1>
     ebe:	21 50       	subi	r18, 0x01	; 1
			break;
			
			case CREATE_M:
			Kernel_Create_Mutex();
     ec0:	31 09       	sbc	r19, r1
     ec2:	30 93 a9 03 	sts	0x03A9, r19	; 0x8003a9 <Event_Count+0x1>

static void Dispatch();

static void Kernel_Lock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByMutexID(Cp->request_arg);
     ec6:	20 93 a8 03 	sts	0x03A8, r18	; 0x8003a8 <Event_Count>
     eca:	b3 82       	std	Z+3, r11	; 0x03
     ecc:	87 db       	rcall	.-2290   	; 0x5dc <Dispatch>
     ece:	fd cd       	rjmp	.-1030   	; 0xaca <Kernel_Start+0x82>
     ed0:	a7 dc       	rcall	.-1714   	; 0x820 <Kernel_Create_Mutex>
     ed2:	fb cd       	rjmp	.-1034   	; 0xaca <Kernel_Start+0x82>
     ed4:	aa 81       	ldd	r26, Y+2	; 0x02
     ed6:	bb 81       	ldd	r27, Y+3	; 0x03
     ed8:	16 96       	adiw	r26, 0x06	; 6
	PD *m_owner = findProcessByPID(m->owner);
     eda:	8d 91       	ld	r24, X+
     edc:	9c 91       	ld	r25, X
     ede:	17 97       	sbiw	r26, 0x07	; 7
     ee0:	85 da       	rcall	.-2806   	; 0x3ec <findMutexByMutexID>
     ee2:	9b 83       	std	Y+3, r25	; 0x03
	
	if(m == NULL)
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	fc 01       	movw	r30, r24
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	11 da       	rcall	.-3038   	; 0x310 <findProcessByPID>
     eee:	ea 80       	ldd	r14, Y+2	; 0x02
		#endif
		return;
	}
	
	// if mutex is free
	if(m->owner == 0)
     ef0:	fb 80       	ldd	r15, Y+3	; 0x03
     ef2:	e1 14       	cp	r14, r1
     ef4:	f1 04       	cpc	r15, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <Kernel_Start+0x4b2>
     ef8:	e8 cd       	rjmp	.-1072   	; 0xaca <Kernel_Start+0x82>
     efa:	d7 01       	movw	r26, r14
     efc:	12 96       	adiw	r26, 0x02	; 2
     efe:	2d 91       	ld	r18, X+
	{
		m->owner = Cp->pid;
     f00:	3c 91       	ld	r19, X
     f02:	13 97       	sbiw	r26, 0x03	; 3
     f04:	21 15       	cp	r18, r1
     f06:	31 05       	cpc	r19, r1
     f08:	99 f4       	brne	.+38     	; 0xf30 <Kernel_Start+0x4e8>
     f0a:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
     f0e:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
     f12:	80 81       	ld	r24, Z
		m->count = 1;
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	13 96       	adiw	r26, 0x03	; 3
     f18:	9c 93       	st	X, r25
     f1a:	8e 93       	st	-X, r24
		m->own_pri = Cp->pri;				// keep track of the original priority of the owner
     f1c:	12 97       	sbiw	r26, 0x02	; 2
     f1e:	15 96       	adiw	r26, 0x05	; 5
     f20:	3c 92       	st	X, r3
     f22:	2e 92       	st	-X, r2
     f24:	14 97       	sbiw	r26, 0x04	; 4
		
		return;
	} else if (m->owner == Cp->pid) {
     f26:	82 81       	ldd	r24, Z+2	; 0x02
     f28:	a6 5a       	subi	r26, 0xA6	; 166
     f2a:	bf 4f       	sbci	r27, 0xFF	; 255
     f2c:	8c 93       	st	X, r24
     f2e:	cd cd       	rjmp	.-1126   	; 0xaca <Kernel_Start+0x82>
     f30:	a0 91 9f 17 	lds	r26, 0x179F	; 0x80179f <Cp>
     f34:	b0 91 a0 17 	lds	r27, 0x17A0	; 0x8017a0 <Cp+0x1>
     f38:	4d 91       	ld	r20, X+
		// if it has locked by the current process
		++(m->count);
     f3a:	5c 91       	ld	r21, X
     f3c:	11 97       	sbiw	r26, 0x01	; 1
     f3e:	24 17       	cp	r18, r20
     f40:	35 07       	cpc	r19, r21
     f42:	41 f4       	brne	.+16     	; 0xf54 <Kernel_Start+0x50c>
     f44:	ea 81       	ldd	r30, Y+2	; 0x02
     f46:	fb 81       	ldd	r31, Y+3	; 0x03
     f48:	84 81       	ldd	r24, Z+4	; 0x04
		return;
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
     f4a:	95 81       	ldd	r25, Z+5	; 0x05
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	95 83       	std	Z+5, r25	; 0x05
     f50:	84 83       	std	Z+4, r24	; 0x04
		//enqueue cp to stack
		++(m->num_of_process);
     f52:	bb cd       	rjmp	.-1162   	; 0xaca <Kernel_Start+0x82>
     f54:	26 e0       	ldi	r18, 0x06	; 6
     f56:	13 96       	adiw	r26, 0x03	; 3
     f58:	2c 93       	st	X, r18
     f5a:	13 97       	sbiw	r26, 0x03	; 3
     f5c:	ea 81       	ldd	r30, Y+2	; 0x02
     f5e:	fb 81       	ldd	r31, Y+3	; 0x03
     f60:	ea 5a       	subi	r30, 0xAA	; 170
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	20 81       	ld	r18, Z
		++(m->total_num);
     f66:	31 81       	ldd	r19, Z+1	; 0x01
     f68:	2f 5f       	subi	r18, 0xFF	; 255
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	31 83       	std	Z+1, r19	; 0x01
     f6e:	20 83       	st	Z, r18
     f70:	ea 81       	ldd	r30, Y+2	; 0x02
     f72:	fb 81       	ldd	r31, Y+3	; 0x03
     f74:	e8 5a       	subi	r30, 0xA8	; 168
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	60 81       	ld	r22, Z
		for (int i=0; i<MAXTHREAD; i++) {
			if (m->blocked_stack[i] == -1){
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	71 83       	std	Z+1, r23	; 0x01
     f82:	60 83       	st	Z, r22
     f84:	ea 81       	ldd	r30, Y+2	; 0x02
     f86:	fb 81       	ldd	r31, Y+3	; 0x03
     f88:	26 81       	ldd	r18, Z+6	; 0x06
     f8a:	37 81       	ldd	r19, Z+7	; 0x07
     f8c:	2f 3f       	cpi	r18, 0xFF	; 255
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	59 f0       	breq	.+22     	; 0xfa8 <Kernel_Start+0x560>
			if (m->blocked_stack[i] == -1){
     f92:	ea 81       	ldd	r30, Y+2	; 0x02
     f94:	fb 81       	ldd	r31, Y+3	; 0x03
     f96:	38 96       	adiw	r30, 0x08	; 8
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	41 91       	ld	r20, Z+
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     f9e:	51 91       	ld	r21, Z+
     fa0:	4f 3f       	cpi	r20, 0xFF	; 255
			if (m->blocked_stack[i] == -1){
				m->blocked_stack[i] = Cp->pid;
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	c9 f4       	brne	.+50     	; 0xfd8 <Kernel_Start+0x590>
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <Kernel_Start+0x564>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4d 91       	ld	r20, X+
     fae:	5c 91       	ld	r21, X
     fb0:	11 97       	sbiw	r26, 0x01	; 1
     fb2:	f9 01       	movw	r30, r18
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	ea 80       	ldd	r14, Y+2	; 0x02
				m->order[i] = m->total_num;
     fba:	fb 80       	ldd	r15, Y+3	; 0x03
     fbc:	ee 0d       	add	r30, r14
				m->priority_stack[i] = Cp->pri;
     fbe:	ff 1d       	adc	r31, r15
     fc0:	57 83       	std	Z+7, r21	; 0x07
     fc2:	46 83       	std	Z+6, r20	; 0x06
     fc4:	77 ab       	std	Z+55, r23	; 0x37
     fc6:	66 ab       	std	Z+54, r22	; 0x36
     fc8:	12 96       	adiw	r26, 0x02	; 2
     fca:	4c 91       	ld	r20, X
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     fcc:	12 97       	sbiw	r26, 0x02	; 2
     fce:	f7 01       	movw	r30, r14
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
		// end of enqueue
		
		
		
		//if cp's priority is higher than the owner
		if (Cp->pri < m_owner->pri) {
     fd4:	46 a3       	std	Z+38, r20	; 0x26
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <Kernel_Start+0x59a>
     fd8:	2f 5f       	subi	r18, 0xFF	; 255
     fda:	3f 4f       	sbci	r19, 0xFF	; 255
     fdc:	20 31       	cpi	r18, 0x10	; 16
     fde:	31 05       	cpc	r19, r1
			m_owner->pri = Cp->pri;				// the owner gets cp's priority
     fe0:	e9 f6       	brne	.-70     	; 0xf9c <Kernel_Start+0x554>
     fe2:	12 96       	adiw	r26, 0x02	; 2
     fe4:	3c 91       	ld	r19, X
		}
		
		
		
		Dispatch();
     fe6:	12 97       	sbiw	r26, 0x02	; 2
     fe8:	fc 01       	movw	r30, r24
     fea:	22 81       	ldd	r18, Z+2	; 0x02
	
}

static void Kernel_Unlock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByMutexID(Cp->request_arg);
     fec:	32 17       	cp	r19, r18
     fee:	18 f4       	brcc	.+6      	; 0xff6 <Kernel_Start+0x5ae>
     ff0:	12 96       	adiw	r26, 0x02	; 2
     ff2:	2c 91       	ld	r18, X
     ff4:	22 83       	std	Z+2, r18	; 0x02
     ff6:	f2 da       	rcall	.-2588   	; 0x5dc <Dispatch>
     ff8:	68 cd       	rjmp	.-1328   	; 0xaca <Kernel_Start+0x82>
     ffa:	aa 81       	ldd	r26, Y+2	; 0x02
     ffc:	bb 81       	ldd	r27, Y+3	; 0x03
     ffe:	16 96       	adiw	r26, 0x06	; 6
	PD *m_owner = findProcessByPID(m->owner);
    1000:	8d 91       	ld	r24, X+
    1002:	9c 91       	ld	r25, X
    1004:	17 97       	sbiw	r26, 0x07	; 7
    1006:	f2 d9       	rcall	.-3100   	; 0x3ec <findMutexByMutexID>
    1008:	9b 83       	std	Y+3, r25	; 0x03
    100a:	8a 83       	std	Y+2, r24	; 0x02
	
	if(m == NULL)
    100c:	fc 01       	movw	r30, r24
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	93 81       	ldd	r25, Z+3	; 0x03
    1012:	7e d9       	rcall	.-3332   	; 0x310 <findProcessByPID>
    1014:	8c 01       	movw	r16, r24
    1016:	ea 80       	ldd	r14, Y+2	; 0x02
		printf("Kernel_Unlock_Mutex: Error finding requested mutex!\n");
		#endif
		return;
	}
	
	if(m->owner != Cp->pid){
    1018:	fb 80       	ldd	r15, Y+3	; 0x03
    101a:	e1 14       	cp	r14, r1
    101c:	f1 04       	cpc	r15, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <Kernel_Start+0x5da>
    1020:	54 cd       	rjmp	.-1368   	; 0xaca <Kernel_Start+0x82>
    1022:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
    1026:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	d7 01       	movw	r26, r14
    1030:	12 96       	adiw	r26, 0x02	; 2
    1032:	2d 91       	ld	r18, X+
    1034:	3c 91       	ld	r19, X
		#ifdef DEBUG
		printf("Kernel_Unlock_Mutex: The owner is not the current process\n");
		#endif
		
		return;
	} else if (m->count > 1) {
    1036:	13 97       	sbiw	r26, 0x03	; 3
    1038:	28 17       	cp	r18, r24
    103a:	39 07       	cpc	r19, r25
    103c:	09 f0       	breq	.+2      	; 0x1040 <Kernel_Start+0x5f8>
    103e:	45 cd       	rjmp	.-1398   	; 0xaca <Kernel_Start+0x82>
    1040:	14 96       	adiw	r26, 0x04	; 4
    1042:	8d 91       	ld	r24, X+
		// M is locked more than once
		--(m->count);
    1044:	9c 91       	ld	r25, X
    1046:	15 97       	sbiw	r26, 0x05	; 5
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	91 05       	cpc	r25, r1
    104c:	30 f0       	brcs	.+12     	; 0x105a <Kernel_Start+0x612>
    104e:	01 97       	sbiw	r24, 0x01	; 1
	} else if (m->num_of_process > 0) {
    1050:	15 96       	adiw	r26, 0x05	; 5
    1052:	9c 93       	st	X, r25
    1054:	8e 93       	st	-X, r24
    1056:	14 97       	sbiw	r26, 0x04	; 4
    1058:	38 cd       	rjmp	.-1424   	; 0xaca <Kernel_Start+0x82>
    105a:	ea 81       	ldd	r30, Y+2	; 0x02
    105c:	fb 81       	ldd	r31, Y+3	; 0x03
    105e:	ea 5a       	subi	r30, 0xAA	; 170
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	60 81       	ld	r22, Z
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	61 15       	cp	r22, r1
    1068:	71 05       	cpc	r23, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <Kernel_Start+0x626>
    106c:	58 c0       	rjmp	.+176    	; 0x111e <Kernel_Start+0x6d6>
    106e:	ea 81       	ldd	r30, Y+2	; 0x02
    1070:	fb 81       	ldd	r31, Y+3	; 0x03
    1072:	e8 5a       	subi	r30, 0xA8	; 168
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	40 81       	ld	r20, Z
    1078:	51 81       	ldd	r21, Z+1	; 0x01
    107a:	4f 5f       	subi	r20, 0xFF	; 255
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
		// M is locked more than once
		--(m->count);
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
    1082:	86 96       	adiw	r24, 0x26	; 38
    1084:	ea 81       	ldd	r30, Y+2	; 0x02
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
    1086:	fb 81       	ldd	r31, Y+3	; 0x03
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
    1088:	36 96       	adiw	r30, 0x06	; 6
    108a:	dc 01       	movw	r26, r24
    108c:	e1 2c       	mov	r14, r1
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
    108e:	d1 2c       	mov	r13, r1
    1090:	fa 2c       	mov	r15, r10
				p_dequeue = m->blocked_stack[i];
    1092:	2d 91       	ld	r18, X+
    1094:	2f 15       	cp	r18, r15
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
    1096:	30 f4       	brcc	.+12     	; 0x10a4 <Kernel_Start+0x65c>
    1098:	40 a9       	ldd	r20, Z+48	; 0x30
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
    109a:	51 a9       	ldd	r21, Z+49	; 0x31
    109c:	e0 80       	ld	r14, Z
    109e:	d1 80       	ldd	r13, Z+1	; 0x01
    10a0:	f2 2e       	mov	r15, r18
    10a2:	0d c0       	rjmp	.+26     	; 0x10be <Kernel_Start+0x676>
    10a4:	2f 11       	cpse	r18, r15
    10a6:	0b c0       	rjmp	.+22     	; 0x10be <Kernel_Start+0x676>
				// same priority and came into the queue earlier
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
    10a8:	60 a8       	ldd	r6, Z+48	; 0x30
    10aa:	71 a8       	ldd	r7, Z+49	; 0x31
    10ac:	46 15       	cp	r20, r6
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
				// same priority and came into the queue earlier
				temp_order = m->order[i];
    10ae:	57 05       	cpc	r21, r7
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
    10b0:	28 f4       	brcc	.+10     	; 0x10bc <Kernel_Start+0x674>
    10b2:	e0 80       	ld	r14, Z
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
    10b4:	d1 80       	ldd	r13, Z+1	; 0x01
    10b6:	f2 2e       	mov	r15, r18
    10b8:	a3 01       	movw	r20, r6
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <Kernel_Start+0x676>
    10bc:	f2 2e       	mov	r15, r18
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			}
		}
		//dequeue index i
		m->blocked_stack[i] = -1;
    10be:	32 96       	adiw	r30, 0x02	; 2
    10c0:	8e 17       	cp	r24, r30
    10c2:	9f 07       	cpc	r25, r31
    10c4:	31 f7       	brne	.-52     	; 0x1092 <Kernel_Start+0x64a>
    10c6:	4a 81       	ldd	r20, Y+2	; 0x02
		m->priority_stack[i] = LOWEST_PRIORITY+1;
    10c8:	5b 81       	ldd	r21, Y+3	; 0x03
    10ca:	da 01       	movw	r26, r20
		m->order[i] = 0;
		--(m->num_of_process);
    10cc:	97 96       	adiw	r26, 0x27	; 39
    10ce:	5c 92       	st	X, r5
    10d0:	4e 92       	st	-X, r4
    10d2:	96 97       	sbiw	r26, 0x26	; 38
    10d4:	d6 96       	adiw	r26, 0x36	; 54
    10d6:	ac 92       	st	X, r10
    10d8:	fa 01       	movw	r30, r20
		PD* target_p = findProcessByPID(p_dequeue);
    10da:	ea 5a       	subi	r30, 0xAA	; 170
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	61 50       	subi	r22, 0x01	; 1
		m_owner->pri = m->own_pri;		//reset owner's priority
    10e0:	71 09       	sbc	r23, r1
    10e2:	71 83       	std	Z+1, r23	; 0x01
    10e4:	60 83       	st	Z, r22
    10e6:	8e 2d       	mov	r24, r14
    10e8:	9d 2d       	mov	r25, r13
    10ea:	12 d9       	rcall	.-3548   	; 0x310 <findProcessByPID>
    10ec:	ea 81       	ldd	r30, Y+2	; 0x02
    10ee:	fb 81       	ldd	r31, Y+3	; 0x03
		m->owner = p_dequeue;
    10f0:	e6 5a       	subi	r30, 0xA6	; 166
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	20 81       	ld	r18, Z
    10f6:	d8 01       	movw	r26, r16
    10f8:	12 96       	adiw	r26, 0x02	; 2
    10fa:	2c 93       	st	X, r18
    10fc:	aa 81       	ldd	r26, Y+2	; 0x02
		m->own_pri = temp_pri;			//keep track of new owner's priority;
    10fe:	bb 81       	ldd	r27, Y+3	; 0x03
		target_p->state = READY;
    1100:	12 96       	adiw	r26, 0x02	; 2
    1102:	ec 92       	st	X, r14
		Cp->state = READY;
    1104:	12 97       	sbiw	r26, 0x02	; 2
    1106:	13 96       	adiw	r26, 0x03	; 3
    1108:	dc 92       	st	X, r13
    110a:	f0 82       	st	Z, r15
		Dispatch();
    110c:	fc 01       	movw	r30, r24
    110e:	b3 82       	std	Z+3, r11	; 0x03
    1110:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
		return;
	} else {
		m->owner = 0;
    1114:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
    1118:	b3 82       	std	Z+3, r11	; 0x03
    111a:	60 da       	rcall	.-2880   	; 0x5dc <Dispatch>
    111c:	d6 cc       	rjmp	.-1620   	; 0xaca <Kernel_Start+0x82>
		m->count = 0;
    111e:	aa 81       	ldd	r26, Y+2	; 0x02
    1120:	bb 81       	ldd	r27, Y+3	; 0x03
    1122:	13 96       	adiw	r26, 0x03	; 3
    1124:	1c 92       	st	X, r1
		m_owner->pri = m->own_pri;		//reset owner's priority
    1126:	1e 92       	st	-X, r1
    1128:	12 97       	sbiw	r26, 0x02	; 2
    112a:	15 96       	adiw	r26, 0x05	; 5
    112c:	1c 92       	st	X, r1
    112e:	1e 92       	st	-X, r1
    1130:	14 97       	sbiw	r26, 0x04	; 4
			//Does this need dispatch under any circumstances?
			break;
		   
			case YIELD:
			case NONE:					// NONE could be caused by a timer interrupt
			Cp->state = READY;
    1132:	a6 5a       	subi	r26, 0xA6	; 166
    1134:	bf 4f       	sbci	r27, 0xFF	; 255
    1136:	8c 91       	ld	r24, X
    1138:	f8 01       	movw	r30, r16
			Dispatch();
    113a:	82 83       	std	Z+2, r24	; 0x02
    113c:	c6 cc       	rjmp	.-1652   	; 0xaca <Kernel_Start+0x82>
    113e:	aa 81       	ldd	r26, Y+2	; 0x02
			break;
       
			//Invalid request code, just ignore
			default:
				err = INVALID_KERNET_REQUEST_ERR;
    1140:	bb 81       	ldd	r27, Y+3	; 0x03
    1142:	13 96       	adiw	r26, 0x03	; 3
    1144:	bc 92       	st	X, r11
		#endif
		
		Next_Kernel_Request();
		/* NEVER RETURNS!!! */
	}
}
    1146:	4a da       	rcall	.-2924   	; 0x5dc <Dispatch>
    1148:	c0 cc       	rjmp	.-1664   	; 0xaca <Kernel_Start+0x82>
    114a:	90 92 9c 17 	sts	0x179C, r9	; 0x80179c <err>
    114e:	bd cc       	rjmp	.-1670   	; 0xaca <Kernel_Start+0x82>
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	bf 90       	pop	r11
    1168:	af 90       	pop	r10
    116a:	9f 90       	pop	r9
    116c:	8f 90       	pop	r8
    116e:	7f 90       	pop	r7
    1170:	6f 90       	pop	r6
    1172:	5f 90       	pop	r5
    1174:	4f 90       	pop	r4
    1176:	3f 90       	pop	r3
    1178:	2f 90       	pop	r2
    117a:	08 95       	ret

0000117c <OS_Init>:
	Enter_Critical_Section();
	
	Cp->request = UNLOCK_M;
	Cp->request_arg = m;
	Enter_Kernel();
}
    117c:	f1 cb       	rjmp	.-2078   	; 0x960 <Kernel_Reset>
    117e:	08 95       	ret

00001180 <OS_Start>:
    1180:	63 cc       	rjmp	.-1850   	; 0xa48 <Kernel_Start>
    1182:	08 95       	ret

00001184 <Task_Create>:
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
    1190:	16 2f       	mov	r17, r22
    1192:	7a 01       	movw	r14, r20
    1194:	80 91 98 17 	lds	r24, 0x1798	; 0x801798 <KernelActive>
    1198:	90 91 99 17 	lds	r25, 0x1799	; 0x801799 <KernelActive+0x1>
    119c:	89 2b       	or	r24, r25
    119e:	81 f0       	breq	.+32     	; 0x11c0 <Task_Create+0x3c>
    11a0:	8d d9       	rcall	.-3302   	; 0x4bc <Enter_Critical_Section>
    11a2:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
    11a6:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
    11aa:	12 83       	std	Z+2, r17	; 0x02
    11ac:	f1 86       	std	Z+9, r15	; 0x09
    11ae:	e0 86       	std	Z+8, r14	; 0x08
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	85 83       	std	Z+5, r24	; 0x05
    11b4:	e4 5f       	subi	r30, 0xF4	; 244
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	d1 83       	std	Z+1, r29	; 0x01
    11ba:	c0 83       	st	Z, r28
    11bc:	17 d8       	rcall	.-4050   	; 0x1ec <Enter_Kernel>
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <Task_Create+0x40>
    11c0:	ce 01       	movw	r24, r28
    11c2:	5e da       	rcall	.-2884   	; 0x680 <Kernel_Create_Task>
    11c4:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <err>
    11c8:	84 30       	cpi	r24, 0x04	; 4
    11ca:	a1 f0       	breq	.+40     	; 0x11f4 <Task_Create+0x70>
    11cc:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <Last_PID>
    11d0:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <Last_PID+0x1>
    11d4:	9f 93       	push	r25
    11d6:	8f 93       	push	r24
    11d8:	8e e6       	ldi	r24, 0x6E	; 110
    11da:	92 e0       	ldi	r25, 0x02	; 2
    11dc:	9f 93       	push	r25
    11de:	8f 93       	push	r24
    11e0:	1b d1       	rcall	.+566    	; 0x1418 <printf>
    11e2:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <Last_PID>
    11e6:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <Last_PID+0x1>
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <Task_Create+0x74>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	08 95       	ret

00001204 <Task_Terminate>:
    1204:	80 91 98 17 	lds	r24, 0x1798	; 0x801798 <KernelActive>
    1208:	90 91 99 17 	lds	r25, 0x1799	; 0x801799 <KernelActive+0x1>
    120c:	89 2b       	or	r24, r25
    120e:	21 f4       	brne	.+8      	; 0x1218 <Task_Terminate+0x14>
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
    1216:	08 95       	ret
    1218:	2a 9a       	sbi	0x05, 2	; 5
    121a:	50 d9       	rcall	.-3424   	; 0x4bc <Enter_Critical_Section>
    121c:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
    1220:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
    1224:	83 e0       	ldi	r24, 0x03	; 3
    1226:	85 83       	std	Z+5, r24	; 0x05
    1228:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    122c:	08 95       	ret

0000122e <Task_Yield>:
    122e:	80 91 98 17 	lds	r24, 0x1798	; 0x801798 <KernelActive>
    1232:	90 91 99 17 	lds	r25, 0x1799	; 0x801799 <KernelActive+0x1>
    1236:	89 2b       	or	r24, r25
    1238:	21 f4       	brne	.+8      	; 0x1242 <Task_Yield+0x14>
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
    1240:	08 95       	ret
    1242:	3c d9       	rcall	.-3464   	; 0x4bc <Enter_Critical_Section>
    1244:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
    1248:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	85 83       	std	Z+5, r24	; 0x05
    1250:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    1254:	08 95       	ret

00001256 <Task_Suspend>:
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	20 91 98 17 	lds	r18, 0x1798	; 0x801798 <KernelActive>
    125e:	30 91 99 17 	lds	r19, 0x1799	; 0x801799 <KernelActive+0x1>
    1262:	23 2b       	or	r18, r19
    1264:	21 f4       	brne	.+8      	; 0x126e <Task_Suspend+0x18>
    1266:	83 e0       	ldi	r24, 0x03	; 3
    1268:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
    126c:	0c c0       	rjmp	.+24     	; 0x1286 <Task_Suspend+0x30>
    126e:	ec 01       	movw	r28, r24
    1270:	25 d9       	rcall	.-3510   	; 0x4bc <Enter_Critical_Section>
    1272:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
    1276:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	85 83       	std	Z+5, r24	; 0x05
    127e:	d7 83       	std	Z+7, r29	; 0x07
    1280:	c6 83       	std	Z+6, r28	; 0x06
    1282:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <Task_Resume>:
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	20 91 98 17 	lds	r18, 0x1798	; 0x801798 <KernelActive>
    1294:	30 91 99 17 	lds	r19, 0x1799	; 0x801799 <KernelActive+0x1>
    1298:	23 2b       	or	r18, r19
    129a:	21 f4       	brne	.+8      	; 0x12a4 <Task_Resume+0x18>
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
    12a2:	0c c0       	rjmp	.+24     	; 0x12bc <Task_Resume+0x30>
    12a4:	ec 01       	movw	r28, r24
    12a6:	0a d9       	rcall	.-3564   	; 0x4bc <Enter_Critical_Section>
    12a8:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
    12ac:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
    12b0:	85 e0       	ldi	r24, 0x05	; 5
    12b2:	85 83       	std	Z+5, r24	; 0x05
    12b4:	d7 83       	std	Z+7, r29	; 0x07
    12b6:	c6 83       	std	Z+6, r28	; 0x06
    12b8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <Task_Sleep>:
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	20 91 98 17 	lds	r18, 0x1798	; 0x801798 <KernelActive>
    12ca:	30 91 99 17 	lds	r19, 0x1799	; 0x801799 <KernelActive+0x1>
    12ce:	23 2b       	or	r18, r19
    12d0:	21 f4       	brne	.+8      	; 0x12da <Task_Sleep+0x18>
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <err>
    12d8:	0c c0       	rjmp	.+24     	; 0x12f2 <Task_Sleep+0x30>
    12da:	ec 01       	movw	r28, r24
    12dc:	ef d8       	rcall	.-3618   	; 0x4bc <Enter_Critical_Section>
    12de:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <Cp>
    12e2:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <Cp+0x1>
    12e6:	86 e0       	ldi	r24, 0x06	; 6
    12e8:	85 83       	std	Z+5, r24	; 0x05
    12ea:	d7 83       	std	Z+7, r29	; 0x07
    12ec:	c6 83       	std	Z+6, r28	; 0x06
    12ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <main>:
void main() 
{
   //Enable STDIN/OUT to UART redirection for debugging
   #ifdef DEBUG
	uart_init();
	uart_setredir();
    12f8:	6b d0       	rcall	.+214    	; 0x13d0 <uart_init>
	printf("STDOUT->UART!\n");
    12fa:	7b d0       	rcall	.+246    	; 0x13f2 <uart_setredir>
    12fc:	85 ea       	ldi	r24, 0xA5	; 165
   #endif  
   
   a_main();
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	9e d0       	rcall	.+316    	; 0x143e <puts>
    1302:	32 c0       	rjmp	.+100    	; 0x1368 <a_main>

/************************************************************************/
/*						   RTOS API FUNCTIONS                           */
/************************************************************************/

void OS_Init(void)	{Kernel_Reset();}
    1304:	08 95       	ret

00001306 <Ping>:
    1306:	2f 9a       	sbi	0x05, 7	; 5
    1308:	83 eb       	ldi	r24, 0xB3	; 179
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	98 d0       	rcall	.+304    	; 0x143e <puts>
    130e:	82 e3       	ldi	r24, 0x32	; 50
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	d7 df       	rcall	.-82     	; 0x12c2 <Task_Sleep>
    1314:	8c df       	rcall	.-232    	; 0x122e <Task_Yield>
    1316:	f7 cf       	rjmp	.-18     	; 0x1306 <Ping>

00001318 <Pong>:
    1318:	2f 98       	cbi	0x05, 7	; 5
    131a:	86 eb       	ldi	r24, 0xB6	; 182
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	8f d0       	rcall	.+286    	; 0x143e <puts>
    1320:	82 e3       	ldi	r24, 0x32	; 50
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	ce df       	rcall	.-100    	; 0x12c2 <Task_Sleep>
    1326:	83 df       	rcall	.-250    	; 0x122e <Task_Yield>
    1328:	f7 cf       	rjmp	.-18     	; 0x1318 <Pong>

0000132a <Peng>:
    132a:	89 eb       	ldi	r24, 0xB9	; 185
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	87 d0       	rcall	.+270    	; 0x143e <puts>
    1330:	82 e3       	ldi	r24, 0x32	; 50
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	c6 df       	rcall	.-116    	; 0x12c2 <Task_Sleep>
    1336:	7b df       	rcall	.-266    	; 0x122e <Task_Yield>
    1338:	f8 cf       	rjmp	.-16     	; 0x132a <Peng>

0000133a <suspend_pong>:
    133a:	8c e2       	ldi	r24, 0x2C	; 44
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	c1 df       	rcall	.-126    	; 0x12c2 <Task_Sleep>
    1340:	8c eb       	ldi	r24, 0xBC	; 188
    1342:	92 e0       	ldi	r25, 0x02	; 2
    1344:	7c d0       	rcall	.+248    	; 0x143e <puts>
    1346:	8c e8       	ldi	r24, 0x8C	; 140
    1348:	99 e0       	ldi	r25, 0x09	; 9
    134a:	86 d8       	rcall	.-3828   	; 0x458 <findPIDByFuncPtr>
    134c:	84 df       	rcall	.-248    	; 0x1256 <Task_Suspend>
    134e:	6f df       	rcall	.-290    	; 0x122e <Task_Yield>
    1350:	8c e2       	ldi	r24, 0x2C	; 44
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	b6 df       	rcall	.-148    	; 0x12c2 <Task_Sleep>
    1356:	8d ec       	ldi	r24, 0xCD	; 205
    1358:	92 e0       	ldi	r25, 0x02	; 2
    135a:	71 d0       	rcall	.+226    	; 0x143e <puts>
    135c:	8c e8       	ldi	r24, 0x8C	; 140
    135e:	99 e0       	ldi	r25, 0x09	; 9
    1360:	7b d8       	rcall	.-3850   	; 0x458 <findPIDByFuncPtr>
    1362:	94 df       	rcall	.-216    	; 0x128c <Task_Resume>
    1364:	64 df       	rcall	.-312    	; 0x122e <Task_Yield>
    1366:	e9 cf       	rjmp	.-46     	; 0x133a <suspend_pong>

00001368 <a_main>:
    1368:	09 df       	rcall	.-494    	; 0x117c <OS_Init>
    136a:	80 e8       	ldi	r24, 0x80	; 128
    136c:	84 b9       	out	0x04, r24	; 4
    136e:	42 ed       	ldi	r20, 0xD2	; 210
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	66 e0       	ldi	r22, 0x06	; 6
    1374:	83 e8       	ldi	r24, 0x83	; 131
    1376:	99 e0       	ldi	r25, 0x09	; 9
    1378:	05 df       	rcall	.-502    	; 0x1184 <Task_Create>
    137a:	4d ec       	ldi	r20, 0xCD	; 205
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	66 e0       	ldi	r22, 0x06	; 6
    1380:	8c e8       	ldi	r24, 0x8C	; 140
    1382:	99 e0       	ldi	r25, 0x09	; 9
    1384:	ff de       	rcall	.-514    	; 0x1184 <Task_Create>
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	64 e0       	ldi	r22, 0x04	; 4
    138c:	8d e9       	ldi	r24, 0x9D	; 157
    138e:	99 e0       	ldi	r25, 0x09	; 9
    1390:	f9 de       	rcall	.-526    	; 0x1184 <Task_Create>
    1392:	4d ec       	ldi	r20, 0xCD	; 205
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	66 e0       	ldi	r22, 0x06	; 6
    1398:	85 e9       	ldi	r24, 0x95	; 149
    139a:	99 e0       	ldi	r25, 0x09	; 9
    139c:	f3 de       	rcall	.-538    	; 0x1184 <Task_Create>
    139e:	f0 ce       	rjmp	.-544    	; 0x1180 <OS_Start>
    13a0:	08 95       	ret

000013a2 <uart_putchar>:

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
}

void uart_putchar(char c, FILE *stream) {
    13a2:	cf 93       	push	r28
    13a4:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    13a6:	8a 30       	cpi	r24, 0x0A	; 10
    13a8:	11 f4       	brne	.+4      	; 0x13ae <uart_putchar+0xc>
		uart_putchar('\r', stream);
    13aa:	8d e0       	ldi	r24, 0x0D	; 13
    13ac:	fa df       	rcall	.-12     	; 0x13a2 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    13ae:	e0 ec       	ldi	r30, 0xC0	; 192
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	85 ff       	sbrs	r24, 5
    13b6:	fd cf       	rjmp	.-6      	; 0x13b2 <uart_putchar+0x10>
	UDR0 = c;
    13b8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
    13c0:	e0 ec       	ldi	r30, 0xC0	; 192
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	88 23       	and	r24, r24
    13c8:	ec f7       	brge	.-6      	; 0x13c4 <uart_getchar+0x4>
	return UDR0;
    13ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
    13ce:	08 95       	ret

000013d0 <uart_init>:

FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
    13d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = UBRRL_VALUE;
    13d4:	87 e6       	ldi	r24, 0x67	; 103
    13d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
    13da:	e0 ec       	ldi	r30, 0xC0	; 192
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8d 7f       	andi	r24, 0xFD	; 253
    13e2:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
    13e4:	86 e0       	ldi	r24, 0x06	; 6
    13e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
    13ea:	88 e1       	ldi	r24, 0x18	; 24
    13ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    13f0:	08 95       	ret

000013f2 <uart_setredir>:
	return UDR0;
}

void uart_setredir(void)
{
	stdout = &uart_output;
    13f2:	e5 ea       	ldi	r30, 0xA5	; 165
    13f4:	f7 e1       	ldi	r31, 0x17	; 23
    13f6:	8e e0       	ldi	r24, 0x0E	; 14
    13f8:	92 e0       	ldi	r25, 0x02	; 2
    13fa:	93 83       	std	Z+3, r25	; 0x03
    13fc:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	80 83       	st	Z, r24
    1406:	08 95       	ret

00001408 <__tablejump2__>:
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	88 1f       	adc	r24, r24
    140e:	8b bf       	out	0x3b, r24	; 59
    1410:	07 90       	elpm	r0, Z+
    1412:	f6 91       	elpm	r31, Z
    1414:	e0 2d       	mov	r30, r0
    1416:	19 94       	eijmp

00001418 <printf>:
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	ae 01       	movw	r20, r28
    1422:	4a 5f       	subi	r20, 0xFA	; 250
    1424:	5f 4f       	sbci	r21, 0xFF	; 255
    1426:	fa 01       	movw	r30, r20
    1428:	61 91       	ld	r22, Z+
    142a:	71 91       	ld	r23, Z+
    142c:	af 01       	movw	r20, r30
    142e:	80 91 a7 17 	lds	r24, 0x17A7	; 0x8017a7 <__iob+0x2>
    1432:	90 91 a8 17 	lds	r25, 0x17A8	; 0x8017a8 <__iob+0x3>
    1436:	33 d0       	rcall	.+102    	; 0x149e <vfprintf>
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <puts>:
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	e0 91 a7 17 	lds	r30, 0x17A7	; 0x8017a7 <__iob+0x2>
    144a:	f0 91 a8 17 	lds	r31, 0x17A8	; 0x8017a8 <__iob+0x3>
    144e:	23 81       	ldd	r18, Z+3	; 0x03
    1450:	21 ff       	sbrs	r18, 1
    1452:	1b c0       	rjmp	.+54     	; 0x148a <puts+0x4c>
    1454:	8c 01       	movw	r16, r24
    1456:	d0 e0       	ldi	r29, 0x00	; 0
    1458:	c0 e0       	ldi	r28, 0x00	; 0
    145a:	f8 01       	movw	r30, r16
    145c:	81 91       	ld	r24, Z+
    145e:	8f 01       	movw	r16, r30
    1460:	60 91 a7 17 	lds	r22, 0x17A7	; 0x8017a7 <__iob+0x2>
    1464:	70 91 a8 17 	lds	r23, 0x17A8	; 0x8017a8 <__iob+0x3>
    1468:	db 01       	movw	r26, r22
    146a:	18 96       	adiw	r26, 0x08	; 8
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    1470:	19 97       	sbiw	r26, 0x09	; 9
    1472:	88 23       	and	r24, r24
    1474:	31 f0       	breq	.+12     	; 0x1482 <puts+0x44>
    1476:	19 95       	eicall
    1478:	89 2b       	or	r24, r25
    147a:	79 f3       	breq	.-34     	; 0x145a <puts+0x1c>
    147c:	df ef       	ldi	r29, 0xFF	; 255
    147e:	cf ef       	ldi	r28, 0xFF	; 255
    1480:	ec cf       	rjmp	.-40     	; 0x145a <puts+0x1c>
    1482:	8a e0       	ldi	r24, 0x0A	; 10
    1484:	19 95       	eicall
    1486:	89 2b       	or	r24, r25
    1488:	19 f0       	breq	.+6      	; 0x1490 <puts+0x52>
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	9f ef       	ldi	r25, 0xFF	; 255
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <puts+0x56>
    1490:	8d 2f       	mov	r24, r29
    1492:	9c 2f       	mov	r25, r28
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	08 95       	ret

0000149e <vfprintf>:
    149e:	2f 92       	push	r2
    14a0:	3f 92       	push	r3
    14a2:	4f 92       	push	r4
    14a4:	5f 92       	push	r5
    14a6:	6f 92       	push	r6
    14a8:	7f 92       	push	r7
    14aa:	8f 92       	push	r8
    14ac:	9f 92       	push	r9
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	2b 97       	sbiw	r28, 0x0b	; 11
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	6c 01       	movw	r12, r24
    14d4:	7b 01       	movw	r14, r22
    14d6:	8a 01       	movw	r16, r20
    14d8:	fc 01       	movw	r30, r24
    14da:	17 82       	std	Z+7, r1	; 0x07
    14dc:	16 82       	std	Z+6, r1	; 0x06
    14de:	83 81       	ldd	r24, Z+3	; 0x03
    14e0:	81 ff       	sbrs	r24, 1
    14e2:	bf c1       	rjmp	.+894    	; 0x1862 <vfprintf+0x3c4>
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	3c 01       	movw	r6, r24
    14ea:	f6 01       	movw	r30, r12
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	f7 01       	movw	r30, r14
    14f0:	93 fd       	sbrc	r25, 3
    14f2:	85 91       	lpm	r24, Z+
    14f4:	93 ff       	sbrs	r25, 3
    14f6:	81 91       	ld	r24, Z+
    14f8:	7f 01       	movw	r14, r30
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <vfprintf+0x62>
    14fe:	ad c1       	rjmp	.+858    	; 0x185a <vfprintf+0x3bc>
    1500:	85 32       	cpi	r24, 0x25	; 37
    1502:	39 f4       	brne	.+14     	; 0x1512 <vfprintf+0x74>
    1504:	93 fd       	sbrc	r25, 3
    1506:	85 91       	lpm	r24, Z+
    1508:	93 ff       	sbrs	r25, 3
    150a:	81 91       	ld	r24, Z+
    150c:	7f 01       	movw	r14, r30
    150e:	85 32       	cpi	r24, 0x25	; 37
    1510:	21 f4       	brne	.+8      	; 0x151a <vfprintf+0x7c>
    1512:	b6 01       	movw	r22, r12
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	d6 d1       	rcall	.+940    	; 0x18c4 <fputc>
    1518:	e8 cf       	rjmp	.-48     	; 0x14ea <vfprintf+0x4c>
    151a:	91 2c       	mov	r9, r1
    151c:	21 2c       	mov	r2, r1
    151e:	31 2c       	mov	r3, r1
    1520:	ff e1       	ldi	r31, 0x1F	; 31
    1522:	f3 15       	cp	r31, r3
    1524:	d8 f0       	brcs	.+54     	; 0x155c <vfprintf+0xbe>
    1526:	8b 32       	cpi	r24, 0x2B	; 43
    1528:	79 f0       	breq	.+30     	; 0x1548 <vfprintf+0xaa>
    152a:	38 f4       	brcc	.+14     	; 0x153a <vfprintf+0x9c>
    152c:	80 32       	cpi	r24, 0x20	; 32
    152e:	79 f0       	breq	.+30     	; 0x154e <vfprintf+0xb0>
    1530:	83 32       	cpi	r24, 0x23	; 35
    1532:	a1 f4       	brne	.+40     	; 0x155c <vfprintf+0xbe>
    1534:	23 2d       	mov	r18, r3
    1536:	20 61       	ori	r18, 0x10	; 16
    1538:	1d c0       	rjmp	.+58     	; 0x1574 <vfprintf+0xd6>
    153a:	8d 32       	cpi	r24, 0x2D	; 45
    153c:	61 f0       	breq	.+24     	; 0x1556 <vfprintf+0xb8>
    153e:	80 33       	cpi	r24, 0x30	; 48
    1540:	69 f4       	brne	.+26     	; 0x155c <vfprintf+0xbe>
    1542:	23 2d       	mov	r18, r3
    1544:	21 60       	ori	r18, 0x01	; 1
    1546:	16 c0       	rjmp	.+44     	; 0x1574 <vfprintf+0xd6>
    1548:	83 2d       	mov	r24, r3
    154a:	82 60       	ori	r24, 0x02	; 2
    154c:	38 2e       	mov	r3, r24
    154e:	e3 2d       	mov	r30, r3
    1550:	e4 60       	ori	r30, 0x04	; 4
    1552:	3e 2e       	mov	r3, r30
    1554:	2a c0       	rjmp	.+84     	; 0x15aa <vfprintf+0x10c>
    1556:	f3 2d       	mov	r31, r3
    1558:	f8 60       	ori	r31, 0x08	; 8
    155a:	1d c0       	rjmp	.+58     	; 0x1596 <vfprintf+0xf8>
    155c:	37 fc       	sbrc	r3, 7
    155e:	2d c0       	rjmp	.+90     	; 0x15ba <vfprintf+0x11c>
    1560:	20 ed       	ldi	r18, 0xD0	; 208
    1562:	28 0f       	add	r18, r24
    1564:	2a 30       	cpi	r18, 0x0A	; 10
    1566:	40 f0       	brcs	.+16     	; 0x1578 <vfprintf+0xda>
    1568:	8e 32       	cpi	r24, 0x2E	; 46
    156a:	b9 f4       	brne	.+46     	; 0x159a <vfprintf+0xfc>
    156c:	36 fc       	sbrc	r3, 6
    156e:	75 c1       	rjmp	.+746    	; 0x185a <vfprintf+0x3bc>
    1570:	23 2d       	mov	r18, r3
    1572:	20 64       	ori	r18, 0x40	; 64
    1574:	32 2e       	mov	r3, r18
    1576:	19 c0       	rjmp	.+50     	; 0x15aa <vfprintf+0x10c>
    1578:	36 fe       	sbrs	r3, 6
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <vfprintf+0xea>
    157c:	8a e0       	ldi	r24, 0x0A	; 10
    157e:	98 9e       	mul	r9, r24
    1580:	20 0d       	add	r18, r0
    1582:	11 24       	eor	r1, r1
    1584:	92 2e       	mov	r9, r18
    1586:	11 c0       	rjmp	.+34     	; 0x15aa <vfprintf+0x10c>
    1588:	ea e0       	ldi	r30, 0x0A	; 10
    158a:	2e 9e       	mul	r2, r30
    158c:	20 0d       	add	r18, r0
    158e:	11 24       	eor	r1, r1
    1590:	22 2e       	mov	r2, r18
    1592:	f3 2d       	mov	r31, r3
    1594:	f0 62       	ori	r31, 0x20	; 32
    1596:	3f 2e       	mov	r3, r31
    1598:	08 c0       	rjmp	.+16     	; 0x15aa <vfprintf+0x10c>
    159a:	8c 36       	cpi	r24, 0x6C	; 108
    159c:	21 f4       	brne	.+8      	; 0x15a6 <vfprintf+0x108>
    159e:	83 2d       	mov	r24, r3
    15a0:	80 68       	ori	r24, 0x80	; 128
    15a2:	38 2e       	mov	r3, r24
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <vfprintf+0x10c>
    15a6:	88 36       	cpi	r24, 0x68	; 104
    15a8:	41 f4       	brne	.+16     	; 0x15ba <vfprintf+0x11c>
    15aa:	f7 01       	movw	r30, r14
    15ac:	93 fd       	sbrc	r25, 3
    15ae:	85 91       	lpm	r24, Z+
    15b0:	93 ff       	sbrs	r25, 3
    15b2:	81 91       	ld	r24, Z+
    15b4:	7f 01       	movw	r14, r30
    15b6:	81 11       	cpse	r24, r1
    15b8:	b3 cf       	rjmp	.-154    	; 0x1520 <vfprintf+0x82>
    15ba:	98 2f       	mov	r25, r24
    15bc:	9f 7d       	andi	r25, 0xDF	; 223
    15be:	95 54       	subi	r25, 0x45	; 69
    15c0:	93 30       	cpi	r25, 0x03	; 3
    15c2:	28 f4       	brcc	.+10     	; 0x15ce <vfprintf+0x130>
    15c4:	0c 5f       	subi	r16, 0xFC	; 252
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	9f e3       	ldi	r25, 0x3F	; 63
    15ca:	99 83       	std	Y+1, r25	; 0x01
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <vfprintf+0x14a>
    15ce:	83 36       	cpi	r24, 0x63	; 99
    15d0:	31 f0       	breq	.+12     	; 0x15de <vfprintf+0x140>
    15d2:	83 37       	cpi	r24, 0x73	; 115
    15d4:	71 f0       	breq	.+28     	; 0x15f2 <vfprintf+0x154>
    15d6:	83 35       	cpi	r24, 0x53	; 83
    15d8:	09 f0       	breq	.+2      	; 0x15dc <vfprintf+0x13e>
    15da:	55 c0       	rjmp	.+170    	; 0x1686 <vfprintf+0x1e8>
    15dc:	20 c0       	rjmp	.+64     	; 0x161e <vfprintf+0x180>
    15de:	f8 01       	movw	r30, r16
    15e0:	80 81       	ld	r24, Z
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	0e 5f       	subi	r16, 0xFE	; 254
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	88 24       	eor	r8, r8
    15ea:	83 94       	inc	r8
    15ec:	91 2c       	mov	r9, r1
    15ee:	53 01       	movw	r10, r6
    15f0:	12 c0       	rjmp	.+36     	; 0x1616 <vfprintf+0x178>
    15f2:	28 01       	movw	r4, r16
    15f4:	f2 e0       	ldi	r31, 0x02	; 2
    15f6:	4f 0e       	add	r4, r31
    15f8:	51 1c       	adc	r5, r1
    15fa:	f8 01       	movw	r30, r16
    15fc:	a0 80       	ld	r10, Z
    15fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1600:	36 fe       	sbrs	r3, 6
    1602:	03 c0       	rjmp	.+6      	; 0x160a <vfprintf+0x16c>
    1604:	69 2d       	mov	r22, r9
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <vfprintf+0x170>
    160a:	6f ef       	ldi	r22, 0xFF	; 255
    160c:	7f ef       	ldi	r23, 0xFF	; 255
    160e:	c5 01       	movw	r24, r10
    1610:	4e d1       	rcall	.+668    	; 0x18ae <strnlen>
    1612:	4c 01       	movw	r8, r24
    1614:	82 01       	movw	r16, r4
    1616:	f3 2d       	mov	r31, r3
    1618:	ff 77       	andi	r31, 0x7F	; 127
    161a:	3f 2e       	mov	r3, r31
    161c:	15 c0       	rjmp	.+42     	; 0x1648 <vfprintf+0x1aa>
    161e:	28 01       	movw	r4, r16
    1620:	22 e0       	ldi	r18, 0x02	; 2
    1622:	42 0e       	add	r4, r18
    1624:	51 1c       	adc	r5, r1
    1626:	f8 01       	movw	r30, r16
    1628:	a0 80       	ld	r10, Z
    162a:	b1 80       	ldd	r11, Z+1	; 0x01
    162c:	36 fe       	sbrs	r3, 6
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <vfprintf+0x198>
    1630:	69 2d       	mov	r22, r9
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <vfprintf+0x19c>
    1636:	6f ef       	ldi	r22, 0xFF	; 255
    1638:	7f ef       	ldi	r23, 0xFF	; 255
    163a:	c5 01       	movw	r24, r10
    163c:	2d d1       	rcall	.+602    	; 0x1898 <strnlen_P>
    163e:	4c 01       	movw	r8, r24
    1640:	f3 2d       	mov	r31, r3
    1642:	f0 68       	ori	r31, 0x80	; 128
    1644:	3f 2e       	mov	r3, r31
    1646:	82 01       	movw	r16, r4
    1648:	33 fc       	sbrc	r3, 3
    164a:	19 c0       	rjmp	.+50     	; 0x167e <vfprintf+0x1e0>
    164c:	82 2d       	mov	r24, r2
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	88 16       	cp	r8, r24
    1652:	99 06       	cpc	r9, r25
    1654:	a0 f4       	brcc	.+40     	; 0x167e <vfprintf+0x1e0>
    1656:	b6 01       	movw	r22, r12
    1658:	80 e2       	ldi	r24, 0x20	; 32
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	33 d1       	rcall	.+614    	; 0x18c4 <fputc>
    165e:	2a 94       	dec	r2
    1660:	f5 cf       	rjmp	.-22     	; 0x164c <vfprintf+0x1ae>
    1662:	f5 01       	movw	r30, r10
    1664:	37 fc       	sbrc	r3, 7
    1666:	85 91       	lpm	r24, Z+
    1668:	37 fe       	sbrs	r3, 7
    166a:	81 91       	ld	r24, Z+
    166c:	5f 01       	movw	r10, r30
    166e:	b6 01       	movw	r22, r12
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	28 d1       	rcall	.+592    	; 0x18c4 <fputc>
    1674:	21 10       	cpse	r2, r1
    1676:	2a 94       	dec	r2
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	82 1a       	sub	r8, r18
    167c:	91 08       	sbc	r9, r1
    167e:	81 14       	cp	r8, r1
    1680:	91 04       	cpc	r9, r1
    1682:	79 f7       	brne	.-34     	; 0x1662 <vfprintf+0x1c4>
    1684:	e1 c0       	rjmp	.+450    	; 0x1848 <vfprintf+0x3aa>
    1686:	84 36       	cpi	r24, 0x64	; 100
    1688:	11 f0       	breq	.+4      	; 0x168e <vfprintf+0x1f0>
    168a:	89 36       	cpi	r24, 0x69	; 105
    168c:	39 f5       	brne	.+78     	; 0x16dc <vfprintf+0x23e>
    168e:	f8 01       	movw	r30, r16
    1690:	37 fe       	sbrs	r3, 7
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <vfprintf+0x204>
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	0c 5f       	subi	r16, 0xFC	; 252
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	08 c0       	rjmp	.+16     	; 0x16b2 <vfprintf+0x214>
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	07 2e       	mov	r0, r23
    16a8:	00 0c       	add	r0, r0
    16aa:	88 0b       	sbc	r24, r24
    16ac:	99 0b       	sbc	r25, r25
    16ae:	0e 5f       	subi	r16, 0xFE	; 254
    16b0:	1f 4f       	sbci	r17, 0xFF	; 255
    16b2:	f3 2d       	mov	r31, r3
    16b4:	ff 76       	andi	r31, 0x6F	; 111
    16b6:	3f 2e       	mov	r3, r31
    16b8:	97 ff       	sbrs	r25, 7
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <vfprintf+0x230>
    16bc:	90 95       	com	r25
    16be:	80 95       	com	r24
    16c0:	70 95       	com	r23
    16c2:	61 95       	neg	r22
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	8f 4f       	sbci	r24, 0xFF	; 255
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	f0 68       	ori	r31, 0x80	; 128
    16cc:	3f 2e       	mov	r3, r31
    16ce:	2a e0       	ldi	r18, 0x0A	; 10
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	a3 01       	movw	r20, r6
    16d4:	33 d1       	rcall	.+614    	; 0x193c <__ultoa_invert>
    16d6:	88 2e       	mov	r8, r24
    16d8:	86 18       	sub	r8, r6
    16da:	44 c0       	rjmp	.+136    	; 0x1764 <vfprintf+0x2c6>
    16dc:	85 37       	cpi	r24, 0x75	; 117
    16de:	31 f4       	brne	.+12     	; 0x16ec <vfprintf+0x24e>
    16e0:	23 2d       	mov	r18, r3
    16e2:	2f 7e       	andi	r18, 0xEF	; 239
    16e4:	b2 2e       	mov	r11, r18
    16e6:	2a e0       	ldi	r18, 0x0A	; 10
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	25 c0       	rjmp	.+74     	; 0x1736 <vfprintf+0x298>
    16ec:	93 2d       	mov	r25, r3
    16ee:	99 7f       	andi	r25, 0xF9	; 249
    16f0:	b9 2e       	mov	r11, r25
    16f2:	8f 36       	cpi	r24, 0x6F	; 111
    16f4:	c1 f0       	breq	.+48     	; 0x1726 <vfprintf+0x288>
    16f6:	18 f4       	brcc	.+6      	; 0x16fe <vfprintf+0x260>
    16f8:	88 35       	cpi	r24, 0x58	; 88
    16fa:	79 f0       	breq	.+30     	; 0x171a <vfprintf+0x27c>
    16fc:	ae c0       	rjmp	.+348    	; 0x185a <vfprintf+0x3bc>
    16fe:	80 37       	cpi	r24, 0x70	; 112
    1700:	19 f0       	breq	.+6      	; 0x1708 <vfprintf+0x26a>
    1702:	88 37       	cpi	r24, 0x78	; 120
    1704:	21 f0       	breq	.+8      	; 0x170e <vfprintf+0x270>
    1706:	a9 c0       	rjmp	.+338    	; 0x185a <vfprintf+0x3bc>
    1708:	e9 2f       	mov	r30, r25
    170a:	e0 61       	ori	r30, 0x10	; 16
    170c:	be 2e       	mov	r11, r30
    170e:	b4 fe       	sbrs	r11, 4
    1710:	0d c0       	rjmp	.+26     	; 0x172c <vfprintf+0x28e>
    1712:	fb 2d       	mov	r31, r11
    1714:	f4 60       	ori	r31, 0x04	; 4
    1716:	bf 2e       	mov	r11, r31
    1718:	09 c0       	rjmp	.+18     	; 0x172c <vfprintf+0x28e>
    171a:	34 fe       	sbrs	r3, 4
    171c:	0a c0       	rjmp	.+20     	; 0x1732 <vfprintf+0x294>
    171e:	29 2f       	mov	r18, r25
    1720:	26 60       	ori	r18, 0x06	; 6
    1722:	b2 2e       	mov	r11, r18
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <vfprintf+0x294>
    1726:	28 e0       	ldi	r18, 0x08	; 8
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <vfprintf+0x298>
    172c:	20 e1       	ldi	r18, 0x10	; 16
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <vfprintf+0x298>
    1732:	20 e1       	ldi	r18, 0x10	; 16
    1734:	32 e0       	ldi	r19, 0x02	; 2
    1736:	f8 01       	movw	r30, r16
    1738:	b7 fe       	sbrs	r11, 7
    173a:	07 c0       	rjmp	.+14     	; 0x174a <vfprintf+0x2ac>
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	0c 5f       	subi	r16, 0xFC	; 252
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	06 c0       	rjmp	.+12     	; 0x1756 <vfprintf+0x2b8>
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 5f       	subi	r16, 0xFE	; 254
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	a3 01       	movw	r20, r6
    1758:	f1 d0       	rcall	.+482    	; 0x193c <__ultoa_invert>
    175a:	88 2e       	mov	r8, r24
    175c:	86 18       	sub	r8, r6
    175e:	fb 2d       	mov	r31, r11
    1760:	ff 77       	andi	r31, 0x7F	; 127
    1762:	3f 2e       	mov	r3, r31
    1764:	36 fe       	sbrs	r3, 6
    1766:	0d c0       	rjmp	.+26     	; 0x1782 <vfprintf+0x2e4>
    1768:	23 2d       	mov	r18, r3
    176a:	2e 7f       	andi	r18, 0xFE	; 254
    176c:	a2 2e       	mov	r10, r18
    176e:	89 14       	cp	r8, r9
    1770:	58 f4       	brcc	.+22     	; 0x1788 <vfprintf+0x2ea>
    1772:	34 fe       	sbrs	r3, 4
    1774:	0b c0       	rjmp	.+22     	; 0x178c <vfprintf+0x2ee>
    1776:	32 fc       	sbrc	r3, 2
    1778:	09 c0       	rjmp	.+18     	; 0x178c <vfprintf+0x2ee>
    177a:	83 2d       	mov	r24, r3
    177c:	8e 7e       	andi	r24, 0xEE	; 238
    177e:	a8 2e       	mov	r10, r24
    1780:	05 c0       	rjmp	.+10     	; 0x178c <vfprintf+0x2ee>
    1782:	b8 2c       	mov	r11, r8
    1784:	a3 2c       	mov	r10, r3
    1786:	03 c0       	rjmp	.+6      	; 0x178e <vfprintf+0x2f0>
    1788:	b8 2c       	mov	r11, r8
    178a:	01 c0       	rjmp	.+2      	; 0x178e <vfprintf+0x2f0>
    178c:	b9 2c       	mov	r11, r9
    178e:	a4 fe       	sbrs	r10, 4
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <vfprintf+0x312>
    1792:	fe 01       	movw	r30, r28
    1794:	e8 0d       	add	r30, r8
    1796:	f1 1d       	adc	r31, r1
    1798:	80 81       	ld	r24, Z
    179a:	80 33       	cpi	r24, 0x30	; 48
    179c:	21 f4       	brne	.+8      	; 0x17a6 <vfprintf+0x308>
    179e:	9a 2d       	mov	r25, r10
    17a0:	99 7e       	andi	r25, 0xE9	; 233
    17a2:	a9 2e       	mov	r10, r25
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <vfprintf+0x31a>
    17a6:	a2 fe       	sbrs	r10, 2
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <vfprintf+0x318>
    17aa:	b3 94       	inc	r11
    17ac:	b3 94       	inc	r11
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <vfprintf+0x31a>
    17b0:	8a 2d       	mov	r24, r10
    17b2:	86 78       	andi	r24, 0x86	; 134
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <vfprintf+0x31a>
    17b6:	b3 94       	inc	r11
    17b8:	a3 fc       	sbrc	r10, 3
    17ba:	10 c0       	rjmp	.+32     	; 0x17dc <vfprintf+0x33e>
    17bc:	a0 fe       	sbrs	r10, 0
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <vfprintf+0x32e>
    17c0:	b2 14       	cp	r11, r2
    17c2:	80 f4       	brcc	.+32     	; 0x17e4 <vfprintf+0x346>
    17c4:	28 0c       	add	r2, r8
    17c6:	92 2c       	mov	r9, r2
    17c8:	9b 18       	sub	r9, r11
    17ca:	0d c0       	rjmp	.+26     	; 0x17e6 <vfprintf+0x348>
    17cc:	b2 14       	cp	r11, r2
    17ce:	58 f4       	brcc	.+22     	; 0x17e6 <vfprintf+0x348>
    17d0:	b6 01       	movw	r22, r12
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	76 d0       	rcall	.+236    	; 0x18c4 <fputc>
    17d8:	b3 94       	inc	r11
    17da:	f8 cf       	rjmp	.-16     	; 0x17cc <vfprintf+0x32e>
    17dc:	b2 14       	cp	r11, r2
    17de:	18 f4       	brcc	.+6      	; 0x17e6 <vfprintf+0x348>
    17e0:	2b 18       	sub	r2, r11
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <vfprintf+0x34a>
    17e4:	98 2c       	mov	r9, r8
    17e6:	21 2c       	mov	r2, r1
    17e8:	a4 fe       	sbrs	r10, 4
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <vfprintf+0x36c>
    17ec:	b6 01       	movw	r22, r12
    17ee:	80 e3       	ldi	r24, 0x30	; 48
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	68 d0       	rcall	.+208    	; 0x18c4 <fputc>
    17f4:	a2 fe       	sbrs	r10, 2
    17f6:	16 c0       	rjmp	.+44     	; 0x1824 <vfprintf+0x386>
    17f8:	a1 fc       	sbrc	r10, 1
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <vfprintf+0x364>
    17fc:	88 e7       	ldi	r24, 0x78	; 120
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0x368>
    1802:	88 e5       	ldi	r24, 0x58	; 88
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	b6 01       	movw	r22, r12
    1808:	0c c0       	rjmp	.+24     	; 0x1822 <vfprintf+0x384>
    180a:	8a 2d       	mov	r24, r10
    180c:	86 78       	andi	r24, 0x86	; 134
    180e:	51 f0       	breq	.+20     	; 0x1824 <vfprintf+0x386>
    1810:	a1 fe       	sbrs	r10, 1
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x37a>
    1814:	8b e2       	ldi	r24, 0x2B	; 43
    1816:	01 c0       	rjmp	.+2      	; 0x181a <vfprintf+0x37c>
    1818:	80 e2       	ldi	r24, 0x20	; 32
    181a:	a7 fc       	sbrc	r10, 7
    181c:	8d e2       	ldi	r24, 0x2D	; 45
    181e:	b6 01       	movw	r22, r12
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	50 d0       	rcall	.+160    	; 0x18c4 <fputc>
    1824:	89 14       	cp	r8, r9
    1826:	30 f4       	brcc	.+12     	; 0x1834 <vfprintf+0x396>
    1828:	b6 01       	movw	r22, r12
    182a:	80 e3       	ldi	r24, 0x30	; 48
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	4a d0       	rcall	.+148    	; 0x18c4 <fputc>
    1830:	9a 94       	dec	r9
    1832:	f8 cf       	rjmp	.-16     	; 0x1824 <vfprintf+0x386>
    1834:	8a 94       	dec	r8
    1836:	f3 01       	movw	r30, r6
    1838:	e8 0d       	add	r30, r8
    183a:	f1 1d       	adc	r31, r1
    183c:	80 81       	ld	r24, Z
    183e:	b6 01       	movw	r22, r12
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	40 d0       	rcall	.+128    	; 0x18c4 <fputc>
    1844:	81 10       	cpse	r8, r1
    1846:	f6 cf       	rjmp	.-20     	; 0x1834 <vfprintf+0x396>
    1848:	22 20       	and	r2, r2
    184a:	09 f4       	brne	.+2      	; 0x184e <vfprintf+0x3b0>
    184c:	4e ce       	rjmp	.-868    	; 0x14ea <vfprintf+0x4c>
    184e:	b6 01       	movw	r22, r12
    1850:	80 e2       	ldi	r24, 0x20	; 32
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	37 d0       	rcall	.+110    	; 0x18c4 <fputc>
    1856:	2a 94       	dec	r2
    1858:	f7 cf       	rjmp	.-18     	; 0x1848 <vfprintf+0x3aa>
    185a:	f6 01       	movw	r30, r12
    185c:	86 81       	ldd	r24, Z+6	; 0x06
    185e:	97 81       	ldd	r25, Z+7	; 0x07
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x3c8>
    1862:	8f ef       	ldi	r24, 0xFF	; 255
    1864:	9f ef       	ldi	r25, 0xFF	; 255
    1866:	2b 96       	adiw	r28, 0x0b	; 11
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	ef 90       	pop	r14
    187e:	df 90       	pop	r13
    1880:	cf 90       	pop	r12
    1882:	bf 90       	pop	r11
    1884:	af 90       	pop	r10
    1886:	9f 90       	pop	r9
    1888:	8f 90       	pop	r8
    188a:	7f 90       	pop	r7
    188c:	6f 90       	pop	r6
    188e:	5f 90       	pop	r5
    1890:	4f 90       	pop	r4
    1892:	3f 90       	pop	r3
    1894:	2f 90       	pop	r2
    1896:	08 95       	ret

00001898 <strnlen_P>:
    1898:	fc 01       	movw	r30, r24
    189a:	05 90       	lpm	r0, Z+
    189c:	61 50       	subi	r22, 0x01	; 1
    189e:	70 40       	sbci	r23, 0x00	; 0
    18a0:	01 10       	cpse	r0, r1
    18a2:	d8 f7       	brcc	.-10     	; 0x189a <strnlen_P+0x2>
    18a4:	80 95       	com	r24
    18a6:	90 95       	com	r25
    18a8:	8e 0f       	add	r24, r30
    18aa:	9f 1f       	adc	r25, r31
    18ac:	08 95       	ret

000018ae <strnlen>:
    18ae:	fc 01       	movw	r30, r24
    18b0:	61 50       	subi	r22, 0x01	; 1
    18b2:	70 40       	sbci	r23, 0x00	; 0
    18b4:	01 90       	ld	r0, Z+
    18b6:	01 10       	cpse	r0, r1
    18b8:	d8 f7       	brcc	.-10     	; 0x18b0 <strnlen+0x2>
    18ba:	80 95       	com	r24
    18bc:	90 95       	com	r25
    18be:	8e 0f       	add	r24, r30
    18c0:	9f 1f       	adc	r25, r31
    18c2:	08 95       	ret

000018c4 <fputc>:
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	fb 01       	movw	r30, r22
    18ce:	23 81       	ldd	r18, Z+3	; 0x03
    18d0:	21 fd       	sbrc	r18, 1
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <fputc+0x16>
    18d4:	8f ef       	ldi	r24, 0xFF	; 255
    18d6:	9f ef       	ldi	r25, 0xFF	; 255
    18d8:	2c c0       	rjmp	.+88     	; 0x1932 <fputc+0x6e>
    18da:	22 ff       	sbrs	r18, 2
    18dc:	16 c0       	rjmp	.+44     	; 0x190a <fputc+0x46>
    18de:	46 81       	ldd	r20, Z+6	; 0x06
    18e0:	57 81       	ldd	r21, Z+7	; 0x07
    18e2:	24 81       	ldd	r18, Z+4	; 0x04
    18e4:	35 81       	ldd	r19, Z+5	; 0x05
    18e6:	42 17       	cp	r20, r18
    18e8:	53 07       	cpc	r21, r19
    18ea:	44 f4       	brge	.+16     	; 0x18fc <fputc+0x38>
    18ec:	a0 81       	ld	r26, Z
    18ee:	b1 81       	ldd	r27, Z+1	; 0x01
    18f0:	9d 01       	movw	r18, r26
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	31 83       	std	Z+1, r19	; 0x01
    18f8:	20 83       	st	Z, r18
    18fa:	8c 93       	st	X, r24
    18fc:	26 81       	ldd	r18, Z+6	; 0x06
    18fe:	37 81       	ldd	r19, Z+7	; 0x07
    1900:	2f 5f       	subi	r18, 0xFF	; 255
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	37 83       	std	Z+7, r19	; 0x07
    1906:	26 83       	std	Z+6, r18	; 0x06
    1908:	14 c0       	rjmp	.+40     	; 0x1932 <fputc+0x6e>
    190a:	8b 01       	movw	r16, r22
    190c:	ec 01       	movw	r28, r24
    190e:	fb 01       	movw	r30, r22
    1910:	00 84       	ldd	r0, Z+8	; 0x08
    1912:	f1 85       	ldd	r31, Z+9	; 0x09
    1914:	e0 2d       	mov	r30, r0
    1916:	19 95       	eicall
    1918:	89 2b       	or	r24, r25
    191a:	e1 f6       	brne	.-72     	; 0x18d4 <fputc+0x10>
    191c:	d8 01       	movw	r26, r16
    191e:	16 96       	adiw	r26, 0x06	; 6
    1920:	8d 91       	ld	r24, X+
    1922:	9c 91       	ld	r25, X
    1924:	17 97       	sbiw	r26, 0x07	; 7
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	17 96       	adiw	r26, 0x07	; 7
    192a:	9c 93       	st	X, r25
    192c:	8e 93       	st	-X, r24
    192e:	16 97       	sbiw	r26, 0x06	; 6
    1930:	ce 01       	movw	r24, r28
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <__ultoa_invert>:
    193c:	fa 01       	movw	r30, r20
    193e:	aa 27       	eor	r26, r26
    1940:	28 30       	cpi	r18, 0x08	; 8
    1942:	51 f1       	breq	.+84     	; 0x1998 <__ultoa_invert+0x5c>
    1944:	20 31       	cpi	r18, 0x10	; 16
    1946:	81 f1       	breq	.+96     	; 0x19a8 <__ultoa_invert+0x6c>
    1948:	e8 94       	clt
    194a:	6f 93       	push	r22
    194c:	6e 7f       	andi	r22, 0xFE	; 254
    194e:	6e 5f       	subi	r22, 0xFE	; 254
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	8f 4f       	sbci	r24, 0xFF	; 255
    1954:	9f 4f       	sbci	r25, 0xFF	; 255
    1956:	af 4f       	sbci	r26, 0xFF	; 255
    1958:	b1 e0       	ldi	r27, 0x01	; 1
    195a:	3e d0       	rcall	.+124    	; 0x19d8 <__ultoa_invert+0x9c>
    195c:	b4 e0       	ldi	r27, 0x04	; 4
    195e:	3c d0       	rcall	.+120    	; 0x19d8 <__ultoa_invert+0x9c>
    1960:	67 0f       	add	r22, r23
    1962:	78 1f       	adc	r23, r24
    1964:	89 1f       	adc	r24, r25
    1966:	9a 1f       	adc	r25, r26
    1968:	a1 1d       	adc	r26, r1
    196a:	68 0f       	add	r22, r24
    196c:	79 1f       	adc	r23, r25
    196e:	8a 1f       	adc	r24, r26
    1970:	91 1d       	adc	r25, r1
    1972:	a1 1d       	adc	r26, r1
    1974:	6a 0f       	add	r22, r26
    1976:	71 1d       	adc	r23, r1
    1978:	81 1d       	adc	r24, r1
    197a:	91 1d       	adc	r25, r1
    197c:	a1 1d       	adc	r26, r1
    197e:	20 d0       	rcall	.+64     	; 0x19c0 <__ultoa_invert+0x84>
    1980:	09 f4       	brne	.+2      	; 0x1984 <__ultoa_invert+0x48>
    1982:	68 94       	set
    1984:	3f 91       	pop	r19
    1986:	2a e0       	ldi	r18, 0x0A	; 10
    1988:	26 9f       	mul	r18, r22
    198a:	11 24       	eor	r1, r1
    198c:	30 19       	sub	r19, r0
    198e:	30 5d       	subi	r19, 0xD0	; 208
    1990:	31 93       	st	Z+, r19
    1992:	de f6       	brtc	.-74     	; 0x194a <__ultoa_invert+0xe>
    1994:	cf 01       	movw	r24, r30
    1996:	08 95       	ret
    1998:	46 2f       	mov	r20, r22
    199a:	47 70       	andi	r20, 0x07	; 7
    199c:	40 5d       	subi	r20, 0xD0	; 208
    199e:	41 93       	st	Z+, r20
    19a0:	b3 e0       	ldi	r27, 0x03	; 3
    19a2:	0f d0       	rcall	.+30     	; 0x19c2 <__ultoa_invert+0x86>
    19a4:	c9 f7       	brne	.-14     	; 0x1998 <__ultoa_invert+0x5c>
    19a6:	f6 cf       	rjmp	.-20     	; 0x1994 <__ultoa_invert+0x58>
    19a8:	46 2f       	mov	r20, r22
    19aa:	4f 70       	andi	r20, 0x0F	; 15
    19ac:	40 5d       	subi	r20, 0xD0	; 208
    19ae:	4a 33       	cpi	r20, 0x3A	; 58
    19b0:	18 f0       	brcs	.+6      	; 0x19b8 <__ultoa_invert+0x7c>
    19b2:	49 5d       	subi	r20, 0xD9	; 217
    19b4:	31 fd       	sbrc	r19, 1
    19b6:	40 52       	subi	r20, 0x20	; 32
    19b8:	41 93       	st	Z+, r20
    19ba:	02 d0       	rcall	.+4      	; 0x19c0 <__ultoa_invert+0x84>
    19bc:	a9 f7       	brne	.-22     	; 0x19a8 <__ultoa_invert+0x6c>
    19be:	ea cf       	rjmp	.-44     	; 0x1994 <__ultoa_invert+0x58>
    19c0:	b4 e0       	ldi	r27, 0x04	; 4
    19c2:	a6 95       	lsr	r26
    19c4:	97 95       	ror	r25
    19c6:	87 95       	ror	r24
    19c8:	77 95       	ror	r23
    19ca:	67 95       	ror	r22
    19cc:	ba 95       	dec	r27
    19ce:	c9 f7       	brne	.-14     	; 0x19c2 <__ultoa_invert+0x86>
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	61 05       	cpc	r22, r1
    19d4:	71 05       	cpc	r23, r1
    19d6:	08 95       	ret
    19d8:	9b 01       	movw	r18, r22
    19da:	ac 01       	movw	r20, r24
    19dc:	0a 2e       	mov	r0, r26
    19de:	06 94       	lsr	r0
    19e0:	57 95       	ror	r21
    19e2:	47 95       	ror	r20
    19e4:	37 95       	ror	r19
    19e6:	27 95       	ror	r18
    19e8:	ba 95       	dec	r27
    19ea:	c9 f7       	brne	.-14     	; 0x19de <__ultoa_invert+0xa2>
    19ec:	62 0f       	add	r22, r18
    19ee:	73 1f       	adc	r23, r19
    19f0:	84 1f       	adc	r24, r20
    19f2:	95 1f       	adc	r25, r21
    19f4:	a0 1d       	adc	r26, r0
    19f6:	08 95       	ret

000019f8 <_exit>:
    19f8:	f8 94       	cli

000019fa <__stop_program>:
    19fa:	ff cf       	rjmp	.-2      	; 0x19fa <__stop_program>
